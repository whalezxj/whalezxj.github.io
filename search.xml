<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot Starter的编写</title>
      <link href="/2021/05/21/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AEStarter%E7%BC%96%E5%86%99/"/>
      <url>/2021/05/21/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AEStarter%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><strong>由SpringBoot自动装置特性引发手写一个DemoStarter想法</strong></p></blockquote><h2 id="先看看SpringBoot的自动注入"><a href="#先看看SpringBoot的自动注入" class="headerlink" title="先看看SpringBoot的自动注入"></a>先看看SpringBoot的自动注入</h2><ul><li><strong>@SpringBootApplication注解</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span><span class="comment">//配置类标注</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span><span class="comment">//自动配置</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;<span class="meta">@Filter</span>(type = FilterType.CUSTOM,classes =&#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;),@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM,classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;)&#125;)//扫描包路径</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>@EnableAutoConfiguration注解</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span><span class="comment">//自动导入包</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)//导入了一个自动导入选择器类(核心)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>AutoConfigurationImportSelector.class</strong></p><blockquote><p>里面定义了各种环境变量，类加载器，资源加载器：<br>重点看这个方法getAutoConfigurationEntry：自动加载配置器实体，<br>然后这里使用了方法 getCandidateConfigurations获取候选的配置</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> AutoConfigurationImportSelector.<span class="function">AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">            <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AnnotationAttributes attributes = <span class="keyword">this</span>.getAttributes(annotationMetadata);</span><br><span class="line">            List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);<span class="comment">//核心</span></span><br><span class="line">            configurations = <span class="keyword">this</span>.removeDuplicates(configurations);</span><br><span class="line">            Set&lt;String&gt; exclusions = <span class="keyword">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line">            <span class="keyword">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">            configurations.removeAll(exclusions);</span><br><span class="line">            configurations = <span class="keyword">this</span>.filter(configurations, autoConfigurationMetadata);</span><br><span class="line">            <span class="keyword">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>​    跟进SpringFactoriesLoader.loadFactoryNames</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        String factoryTypeName = factoryType.getName();</span><br><span class="line">        <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//在 loadSpringFactories 方法中可以看到会去读取 spring.factories 配置文件</span></span><br><span class="line"><span class="comment">//                Enumeration&lt;URL&gt; urls = classLoader != null ? classLoader.getResources("META-INF/spring.factories") : ClassLoader.getSystemResources("META-INF/spring.factories");</span></span><br></pre></td></tr></table></figure><blockquote><p>spring.factories    里的大概形状</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Initializers</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span></span><br></pre></td></tr></table></figure><p><strong>至此，@EnableAutoConfiguration注解就算完成了</strong></p><hr><h2 id="接下来自己写一个DemoStarter工程"><a href="#接下来自己写一个DemoStarter工程" class="headerlink" title="接下来自己写一个DemoStarter工程"></a>接下来自己写一个DemoStarter工程</h2><ol><li><h3 id="先创建一个pom工程"><a href="#先创建一个pom工程" class="headerlink" title="先创建一个pom工程"></a>先创建一个pom工程</h3></li><li><h3 id="编写pom文档（引入依赖）"><a href="#编写pom文档（引入依赖）" class="headerlink" title="编写pom文档（引入依赖）"></a>编写pom文档（引入依赖）</h3></li><li><h3 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h3></li><li><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3></li><li><h3 id="打包发布测试"><a href="#打包发布测试" class="headerlink" title="打包发布测试"></a>打包发布测试</h3><blockquote><p>编写pom文档</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置类</p></blockquote><ul><li>逻辑处理类<strong>DemoService</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *可以做一些逻辑方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置类<strong>DemoProperties</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"demo"</span>)<span class="comment">//配置文件头</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_TEXT = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> String text = DEFAULT_TEXT;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自动配置类<strong>DemoAutoConfiguration</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//标明配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(DemoService<span class="class">.<span class="keyword">class</span>)//存在<span class="title">DemoService</span>.<span class="title">class</span>此类才会进行自动</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">DemoProperties</span>.<span class="title">class</span>)//读取配置类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DemoAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span><span class="comment">//注入</span></span><br><span class="line">    <span class="keyword">private</span> DemoProperties demoProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//注册到容器</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(DemoService<span class="class">.<span class="keyword">class</span>)//不存在实例时进行注册</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">DemoService</span> <span class="title">demoService</span>()</span>&#123;</span><br><span class="line">        DemoService demoService = <span class="keyword">new</span> DemoService();</span><br><span class="line">        demoService.setText(demoProperties.getText());</span><br><span class="line">        <span class="keyword">return</span> demoService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打包 引用</li></ul><h2 id="创建一个TestDemoStarter工程"><a href="#创建一个TestDemoStarter工程" class="headerlink" title="创建一个TestDemoStarter工程"></a>创建一个<strong>TestDemoStarter</strong>工程</h2><ul><li>引用<strong>DemoStarter</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写<strong>application.yml</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这个就是刚刚自己写的</span></span><br><span class="line"><span class="attr">demo:</span></span><br><span class="line">  <span class="attr">text:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8089</span></span><br></pre></td></tr></table></figure><ul><li>编写<strong>Controller</strong>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getText"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demoService.getText();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果</strong></p><p><img src= "/img/loading.gif" data-src="/2021/05/21/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AEStarter%E7%BC%96%E5%86%99/C:%5CUsers%5C11578%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210521160227497.png" alt="image-20210521160227497"></p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看日志</title>
      <link href="/2021/04/19/%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A5%E5%BF%97/"/>
      <url>/2021/04/19/%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Linux查看日志命令"><a href="#Linux查看日志命令" class="headerlink" title="Linux查看日志命令"></a>Linux查看日志命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tail -f fileName <span class="comment">#实时查看</span></span><br><span class="line">tail -f fileName|grep <span class="string">"save"</span> <span class="comment">#过滤--只显示匹配的行</span></span><br><span class="line">tail -f fileName|grep -v <span class="string">"save"</span> <span class="comment">#过滤--显示不匹配的行</span></span><br><span class="line">cat fileName <span class="comment">#查看文件</span></span><br><span class="line">cat fileName|grep <span class="string">"save"</span> <span class="comment">#过滤--只显示匹配的行</span></span><br><span class="line">cat fileName|grep <span class="string">"save"</span>|wc -l <span class="comment">#统计匹配的行</span></span><br><span class="line">cat fileName|grep -o <span class="string">"cardSource\.*"</span>  <span class="comment">#显示匹配正则的字段</span></span><br><span class="line">cat fileName|grep -A 10 <span class="string">"save"</span> <span class="comment">#过滤--显示匹配的行后10行</span></span><br><span class="line">cat fileName|grep -B 10 <span class="string">"save"</span> <span class="comment">#过滤--显示匹配的行前10行</span></span><br><span class="line">cat fileName|grep -C 10 <span class="string">"save"</span> <span class="comment">#过滤--显示匹配的行前后10行</span></span><br><span class="line">cat -n fileName <span class="comment">#显示行数</span></span><br><span class="line">sed -n <span class="string">'5,10p'</span> fileName <span class="comment">#显示第5行到第10行</span></span><br><span class="line">more fileName <span class="comment">#分屏显示</span></span><br><span class="line">more +10 fileName <span class="comment">#从第10行开始分屏显示</span></span><br><span class="line">less fileName <span class="comment">#打开文件后按G调到末尾，按f向前翻页，按b向后翻页。输入行号可跳转到从当前页开始的指定行。</span></span><br><span class="line">less -N fileName<span class="comment">#显示行号</span></span><br></pre></td></tr></table></figure><h2 id="Windows查看日志命令"><a href="#Windows查看日志命令" class="headerlink" title="Windows查看日志命令"></a>Windows查看日志命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到logs目录</span></span><br><span class="line">&gt;powershell <span class="comment"># 切换powershell </span></span><br><span class="line">&gt;<span class="built_in">Get-Content</span>  <span class="literal">-wait</span> 文件名.txt <span class="comment">#Get-Content 获取指定文件的内容 -wait:等待文件输出，每秒检查一次，ctrl+c退出</span></span><br><span class="line">&gt;cat <span class="literal">-Await</span> <span class="literal">-Tail</span> <span class="literal">-1000</span> 文件名 <span class="comment">#第二种</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(dubbo初探)</title>
      <link href="/2021/04/13/dubbo/"/>
      <url>/2021/04/13/dubbo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="dubbo-demo"><a href="#dubbo-demo" class="headerlink" title="dubbo-demo"></a>dubbo-demo</h1><blockquote><p>启动zookeeper  </p></blockquote><ol><li>执行apache-zookeeper-3.5.9-bin\bin&gt;zkServer.cmd</li></ol><h2 id="服务者"><a href="#服务者" class="headerlink" title="服务者"></a>服务者</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.4.4&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&gt;&#x2F;&lt;&#x2F;relativePath&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.dubbo.demo&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-demo-interface&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.2.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><p>​    application.yaml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider</span> <span class="comment"># 服务名字</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span> <span class="comment">#注册地址</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">zookeeper</span> <span class="comment">#注册协议</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span> <span class="comment">#通信协议</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">20880</span> <span class="comment">#通信端口</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">monitor:</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">registry</span> <span class="comment"># 监控中心</span></span><br></pre></td></tr></table></figure><blockquote><p>​    启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboDemoProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DubboDemoProvider<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>暴露的服务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Service</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getById"</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.dubbo.demo&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-demo-interface&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.4.4&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.2.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><p>application.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span> <span class="comment">#应用端口号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">consumer</span> <span class="comment">#服务名称</span></span><br><span class="line">    <span class="attr">registry:</span></span><br><span class="line">      <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span> <span class="comment">#注册地址</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">zookeeper</span> <span class="comment">#注册协议</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">monitor:</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">registry</span> <span class="comment"># 监控协议</span></span><br></pre></td></tr></table></figure><blockquote><p>​    启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboDemoConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DubboDemoConsumer<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用的服务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置dubbo-admin"><a href="#配置dubbo-admin" class="headerlink" title="配置dubbo-admin"></a>配置dubbo-admin</h2><blockquote><p>启动dubbo-admin  </p></blockquote><ol><li>修改zookeeper地址 </li><li>打包（mvn clean package）</li><li>执行jar包</li></ol><h2 id="配置dubbo-monitor-simple简易监控中心"><a href="#配置dubbo-monitor-simple简易监控中心" class="headerlink" title="配置dubbo-monitor-simple简易监控中心"></a>配置dubbo-monitor-simple简易监控中心</h2><ol><li>打包（mvn clean package）</li><li>检查配置参数端口地址</li><li>解压jar包</li><li>进入解压包，执行 /assembly.bin/start.bat</li></ol><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="查看dubbo服务"><a href="#查看dubbo服务" class="headerlink" title="查看dubbo服务"></a>查看dubbo服务</h3><p><img src= "/img/loading.gif" data-src="/2021/04/13/dubbo/C:%5CUsers%5C11578%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210414114737963.png" alt="image-20210414114737963"></p><h3 id="查看监视器"><a href="#查看监视器" class="headerlink" title="查看监视器"></a>查看监视器</h3><p><img src= "/img/loading.gif" data-src="/2021/04/13/dubbo/C:%5CUsers%5C11578%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210414140844018.png" alt="image-20210414140844018"></p><h3 id="访问消费者接口"><a href="#访问消费者接口" class="headerlink" title="访问消费者接口"></a>访问消费者接口</h3><p><img src= "/img/loading.gif" data-src="/2021/04/13/dubbo/C:%5CUsers%5C11578%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210414140857971.png" alt="image-20210414140857971"></p><h1 id="dubbo设计原理"><a href="#dubbo设计原理" class="headerlink" title="dubbo设计原理"></a>dubbo设计原理</h1><h2 id="1-dubbo原理-框架设计"><a href="#1-dubbo原理-框架设计" class="headerlink" title="1.dubbo原理 -框架设计"></a>1.dubbo原理 -框架设计</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200613171327533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTU3NTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>config 配置层：对外配置接口，以 ServiceConfig, ReferenceConfig 为中心，可以直接初始化配置类，也可以通过 spring 解析配置生成配置类</li><li>proxy 服务代理层：服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton, 以 ServiceProxy 为中心，扩展接口为 ProxyFactory</li><li>registry 注册中心层：封装服务地址的注册与发现，以服务 URL 为中心，扩展接口为 RegistryFactory, Registry, RegistryService</li><li>cluster 路由层：封装多个提供者的路由及负载均衡，并桥接注册中心，以 Invoker 为中心，扩展接口为 Cluster, Directory, Router, LoadBalance</li><li>monitor 监控层：RPC 调用次数和调用时间监控，以 Statistics 为中心，扩展接口为 MonitorFactory, Monitor, MonitorService</li><li>protocol 远程调用层：封装 RPC 调用，以 Invocation, Result 为中心，扩展接口为 Protocol, Invoker, Exporter</li><li>exchange 信息交换层：封装请求响应模式，同步转异步，以 Request, Response 为中心，扩展接口为 Exchanger, ExchangeChannel, ExchangeClient, ExchangeServer</li><li>transport 网络传输层：抽象 mina 和 netty 为统一接口，以 Message 为中心，扩展接口为 Channel, Transporter, Client, Server, Codec</li><li>serialize 数据序列化层：可复用的一些工具，扩展接口为 Serialization, ObjectInput, ObjectOutput, ThreadPool</li></ul><h2 id="2-dubbo原理-启动解析、加载配置信息"><a href="#2-dubbo原理-启动解析、加载配置信息" class="headerlink" title="2.dubbo原理 -启动解析、加载配置信息"></a>2.dubbo原理 -启动解析、加载配置信息</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200613171545504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTU3NTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-dubbo原理-服务暴露"><a href="#3-dubbo原理-服务暴露" class="headerlink" title="3.dubbo原理 -服务暴露"></a>3.dubbo原理 -服务暴露</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200613171614614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTU3NTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-dubbo原理-服务引用"><a href="#4-dubbo原理-服务引用" class="headerlink" title="4.dubbo原理 -服务引用"></a>4.dubbo原理 -服务引用</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200613171741579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTU3NTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-dubbo原理-服务调用"><a href="#5-dubbo原理-服务调用" class="headerlink" title="5.dubbo原理 -服务调用"></a>5.dubbo原理 -服务调用</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200613171806762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTU3NTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 分布式父 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(BeanFactory和ApplicationContext的区别)</title>
      <link href="/2021/04/07/BeanFactory%E5%92%8CApplicationContext%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/04/07/BeanFactory%E5%92%8CApplicationContext%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>1、国际化</strong><br>BeanFactory是不支持国际化功能的，因为BeanFactory没有扩展Spring中MessageResource接口。相反，由于Application<a href="https://coding.imooc.com/?c=c" target="_blank" rel="noopener">C</a>ontext扩展了MessageResource接口，因而具有消息处理的能力(i18N)</p><p><strong>2、强大的事件机制(Event)</strong><br>基本上牵涉到事件(Event)方面的设计，就离不开观察者模式，<br>Application<a href="https://coding.imooc.com/?c=c" target="_blank" rel="noopener">C</a>ontext的事件机制主要通过ApplicationEvent和ApplicationListener这两个接口来提供的，和<a href="https://coding.imooc.com/?c=java" target="_blank" rel="noopener">java</a> swing中的事件机制一样。即当Application<a href="https://coding.imooc.com/?c=c" target="_blank" rel="noopener">C</a>ontext中发布一个事件的时，所有扩展了ApplicationListener的Bean都将会接受到这个事件，并进行相应的处理。</p><p><strong>3、底层资源的访问</strong><br>Application<a href="https://coding.imooc.com/?c=c" target="_blank" rel="noopener">C</a>ontext扩展了ResourceLoader(资源加载器)接口，从而可以用来加载多个Resource，而BeanFactory是没有扩展ResourceLoader</p><p><strong>4、对Web应用的支持</strong><br>与BeanFactory通常以编程的方式被创建不同的是，Application<a href="https://coding.imooc.com/?c=c" target="_blank" rel="noopener">C</a>ontext能以声明的方式创建，如使用<a href="https://coding.imooc.com/?c=c" target="_blank" rel="noopener">C</a>ontextLoader。当然你也可以使用Application<a href="https://coding.imooc.com/?c=c" target="_blank" rel="noopener">C</a>ontext的实现之一来以编程的方式创建Application<a href="https://coding.imooc.com/?c=c" target="_blank" rel="noopener">C</a>ontext实例 。</p><p><strong>5、延迟加载</strong><br>1).BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化，这样，我们就不能发现一些存在的spring的配置问题。而Application<a href="https://coding.imooc.com/?c=c" target="_blank" rel="noopener">C</a>ontext则相反，它是在<a href="https://coding.imooc.com/?c=container" target="_blank" rel="noopener">容器</a>启动时，一次性创建了所有的Bean。这样，在<a href="https://coding.imooc.com/?c=container" target="_blank" rel="noopener">容器</a>启动时，我们就可以发现Spring中存在的配置错误。</p><p>2).BeanFactory和Application<a href="https://coding.imooc.com/?c=c" target="_blank" rel="noopener">C</a>ontext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而Application<a href="https://coding.imooc.com/?c=c" target="_blank" rel="noopener">C</a>ontext则是自动注册</p><blockquote><p>可以看到，ApplicationContext继承了BeanFactory，BeanFactory是Spring中比较原始的Factory，它不支持AOP、Web等Spring插件，而ApplicationContext不仅包含了BeanFactory的所有功能，还支持Spring的各种插件，还以一种面向框架的方式工作以及对上下文进行分层和实现继承。<br>BeanFactory是Spring框架的基础设施，面向Spring本身；而ApplicationContext面向使用Spring的开发者，相比BeanFactory提供了更多面向实际应用的功能，几乎所有场合都可以直接使用ApplicationContext而不是底层的BeanFactory</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXL-JOB分布式任务调度</title>
      <link href="/2021/01/22/XXL-JOB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/01/22/XXL-JOB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="XXL-JOB分布式任务调度"><a href="#XXL-JOB分布式任务调度" class="headerlink" title="XXL-JOB分布式任务调度"></a>XXL-JOB分布式任务调度</h1><p>1、简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手；</p><p>2、动态：支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；</p><p>3、调度中心HA（中心式）：调度采用中心式设计，“调度中心”自研调度组件并支持集群部署，可保证调度中心HA；</p><p>4、执行器HA（分布式）：任务分布式执行，任务”执行器”支持集群部署，可保证任务执行HA；</p><p>5、注册中心: 执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行。同时，也支持手动录入执行器地址；</p><p>6、弹性扩容缩容：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；</p><p>7、路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；</p><p>8、故障转移：任务路由策略选择”故障转移”情况下，如果执行器集群中某一台机器故障，将会自动Failover切换到一台正常的执行器发送调度请求。</p><p>9、阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；</p><p>10、任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；</p><p>11、任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；其中分片任务支持分片粒度的失败重试；</p><p>12、任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；</p><p>13、分片广播任务：执行器集群部署时，任务路由策略选择”分片广播”情况下，一次任务调度将会广播触发集群中所有执行器执行一次任务，可根据分片参数开发分片任务；</p><p>14、动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理；在进行大数据量业务操作时可显著提升任务处理能力和速度；</p><p>15、事件触发：除了”cron方式”和”任务依赖方式”触发任务执行之外，支持基于事件的触发任务方式。调度中心提供触发任务单次执行的API服务，可根据业务事件灵活触发···</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitHub:https:&#x2F;&#x2F;github.com&#x2F;xuxueli&#x2F;xxl-job</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2021/01/22/sI77TI.png" alt="image-20210122171850448"></p><p>然后运行自带的.sql文件，在Navcat中去运行，生成需要的表👇</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDIwLzAzLzA3LzNYblpBUC5wbmc?x-oss-process=image/format,png" alt></p><p>打开xxl-job-admin模块，在application.properties中进行后台的配置（数据库等信息）</p><p>启动后：默认账户admin，密码123456<img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDIwLzAzLzA3LzNYS0dXVC5wbmc?x-oss-process=image/format,png" alt="img"></p><p>执行方法在springboot下jobhandler包里面√</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDIwLzAzLzA3LzNYbDlMNC5wbmc?x-oss-process=image/format,png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 定时器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 定时器 </tag>
            
            <tag> 任务调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigDecimal相加的坑</title>
      <link href="/2021/01/18/BigDecimal%E7%9B%B8%E5%8A%A0%E7%9A%84%E5%9D%91/"/>
      <url>/2021/01/18/BigDecimal%E7%9B%B8%E5%8A%A0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="BigDecimal相加的坑"><a href="#BigDecimal相加的坑" class="headerlink" title="BigDecimal相加的坑"></a>BigDecimal相加的坑</h1><h2 id="在循环中相加"><a href="#在循环中相加" class="headerlink" title="在循环中相加"></a>在循环中相加</h2><h3 id="普通for循环"><a href="#普通for循环" class="headerlink" title="普通for循环"></a>普通for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    bigDecimal = bigDecimal.add(<span class="keyword">new</span> BigDecimal(<span class="number">1234</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><h4 id="反例："><a href="#反例：" class="headerlink" title="反例："></a>反例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bigDecimalTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        bigDecimal = bigDecimal.add(<span class="keyword">new</span> BigDecimal(<span class="number">1234</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;test&gt; test = <span class="keyword">new</span> ArrayList&lt;test&gt;();</span><br><span class="line">    test.forEach(i-&gt;&#123;</span><br><span class="line">        <span class="comment">//这样会报错</span></span><br><span class="line">        <span class="comment">//bigDecimal = bigDecimal.add(i.getTest()); </span></span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(bigDecimal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    BigDecimal test = BigDecimal.ZERO ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getQshPaymentList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BigDecimal[] bigDecimal = &#123;<span class="keyword">new</span> BigDecimal(<span class="number">0</span>)&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            bigDecimal[<span class="number">0</span>] = bigDecimal[<span class="number">0</span>].add(<span class="keyword">new</span> BigDecimal(<span class="number">1234</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;test&gt; test = <span class="keyword">new</span> ArrayList&lt;test&gt;();</span><br><span class="line">        test.forEach(i-&gt;&#123;</span><br><span class="line">            bigDecimal[<span class="number">0</span>] = bigDecimal[<span class="number">0</span>].add(i.getTest());</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(bigDecimal[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    BigDecimal test = BigDecimal.ZERO ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 那些不知道的坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BigDecimal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL面试题</title>
      <link href="/2020/12/21/mysql%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/12/21/mysql%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h3 id="1、SQL语句执行流程"><a href="#1、SQL语句执行流程" class="headerlink" title="1、SQL语句执行流程"></a>1、SQL语句执行流程</h3><p>MySQL大体上可分为<code>Server层</code>和<code>存储引擎层</code>两部分。</p><h5 id="Server层："><a href="#Server层：" class="headerlink" title="Server层："></a>Server层：</h5><ul><li><code>连接器</code>：TCP握手后服务器来验证登陆用户身份，A用户创建连接后，管理员对A用户权限修改了也不会影响到已经创建的链接权限，必须重新登陆。</li><li><code>查询缓存</code>：查询后的结果存储位置，MySQL8.0版本以后已经取消，因为查询缓存失效太频繁，得不偿失。</li><li><code>分析器</code>：根据语法规则，判断你输入的这个SQL语句是否满足MySQL语法。</li><li><code>优化器</code>：多种执行策略可实现目标，系统自动选择最优进行执行。</li><li><code>执行器</code>：判断是否有权限，将最终任务提交到存储引擎。</li></ul><h5 id="存储引擎层"><a href="#存储引擎层" class="headerlink" title="存储引擎层"></a>存储引擎层</h5><p>负责数据的存储和提取。其架构模式是<code>插件式</code>的，支持<code>InnoDB</code>、<code>MyISAM</code>、<code>Memory</code>等多个存储引擎。现在最常用的存储引擎是<code>InnoDB</code>，它从MySQL 5.5.5版本开始成为了默认存储引擎(经常用的也是这个)。</p><p><img src= "/img/loading.gif" data-src="https://z3.ax1x.com/2021/04/23/cXnlxH.png" alt="图片"></p><h5 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h5><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dUQrRBUyxETV2RgzXuPqjscvL02EdeR3b0PK0icwria3VTqC15hyics1iaicuuz2KKUlVCZm4tDbRX1JtA/640" alt="图片"></p><h3 id="2、BinLog、RedoLog、UndoLog"><a href="#2、BinLog、RedoLog、UndoLog" class="headerlink" title="2、BinLog、RedoLog、UndoLog"></a>2、BinLog、RedoLog、UndoLog</h3><h5 id="BinLog"><a href="#BinLog" class="headerlink" title="BinLog"></a>BinLog</h5><p><code>BinLog</code>是记录所有数据库表结构变更（例如create、alter table）以及表数据修改(insert、update、delete)的二进制日志，主从数据库同步用到的都是BinLog文件。BinLog日志文件有三种模式。</p><p><strong>STATEMENT 模式</strong></p><blockquote><p><code>内容</code>：binlog 只会记录可能引起数据变更的 sql 语句</p><p><code>优势</code>：该模式下，因为没有记录实际的数据，所以日志量和 IO 都消耗很低，性能是最优的</p><p><code>劣势</code>：但有些操作并不是确定的，比如 uuid() 函数会随机产生唯一标识，当依赖 binlog 回放时，该操作生成的数据与原数据必然是不同的，此时可能造成无法预料的后果。</p></blockquote><p><strong>ROW 模式</strong></p><blockquote><p><code>内容</code>：在该模式下，binlog 会<strong>记录每次操作的源数据与修改后的目标数据</strong>，StreamSets就要求该模式。</p><p><code>优势</code>：可以绝对精准的还原，从而保证了数据的安全与可靠，并且复制和数据恢复过程可以是并发进行的</p><p><code>劣势</code>：缺点在于 binlog 体积会非常大，同时，对于修改记录多、字段长度大的操作来说，记录时性能消耗会很严重。阅读的时候也需要特殊指令来进行读取数据。</p></blockquote><p><strong>MIXED 模式</strong></p><blockquote><p><code>内容</code>：是对上述STATEMENT 跟 ROW  两种模式的混合使用。</p><p><code>细节</code>：对于绝大部分操作，都使用 STATEMENT 来进行 binlog 的记录，只有以下操作使用 ROW 来实现：表的存储引擎为 NDB，使用了uuid() 等不确定函数，使用了 insert delay 语句，使用了临时表</p></blockquote><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dUQrRBUyxETV2RgzXuPqjscM2Fp9cfschice1hHVoTicZwJAfggMichIjt1rJnhqXSpWviaAR5BeiaaKTg/640" alt="图片"><strong>主从同步流程</strong>：</p><blockquote><p>1、主节点必须启用二进制日志，记录任何修改了数据库数据的事件。</p><p>2、从节点开启一个线程（I/O Thread)把自己扮演成 mysql 的客户端，通过 mysql 协议，请求主节点的二进制日志文件中的事件 。</p><p>3、主节点启动一个线程（dump Thread），检查自己二进制日志中的事件，跟对方请求的位置对比，如果不带请求位置参数，则主节点就会从第一个日志文件中的第一个事件一个一个发送给从节点。</p><p>4、从节点接收到主节点发送过来的数据把它放置到中继日志（Relay log）文件中。并记录该次请求到主节点的具体哪一个二进制日志文件内部的哪一个位置（主节点中的二进制文件会有多个）。</p><p>5、从节点启动另外一个线程（sql Thread ），把 Relay log 中的事件读取出来，并在本地再执行一次。</p></blockquote><p>mysql默认的复制方式是<code>异步</code>的，并且复制的时候是有<code>并行复制能力</code>的。主库把日志发送给从库后不管了，这样会产生一个问题就是假设主库挂了，从库处理失败了，这时候从库升为主库后，<strong>日志就丢失了</strong>。由此产生两个概念。</p><ol><li>全同步复制</li></ol><blockquote><p>主库写入binlog后强制同步日志到从库，<strong>所有的从库都执行完成后才返回给客户端</strong>，但是很显然这个方式的话性能会受到严重影响。</p></blockquote><ol><li>半同步复制</li></ol><blockquote><p>半同步复制的逻辑是这样，从库写入日志成功后返回<code>ACK</code>确认给主库，主库收到至少一个从库的确认就认为写操作完成。</p></blockquote><p>还可以延伸到由于主从配置不一样、主库大事务、从库压力过大、网络震荡等造成<code>主备延迟</code>，如何避免这个问题？主备切换的时候用<code>可靠性优先原则</code>还是<code>可用性优先原则</code>？如何判断主库Crash了？互为主备情况下如何避免主备循环复制？被删库跑路了如何正确恢复？(⊙o⊙)<img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_gif/wJvXicD0z2dUQrRBUyxETV2RgzXuPqjscibMIov2IbEqK78yrVZjpMS5GW2NoqXOs5CB0ibVxDT0nzQ3DVUa2QAaA/640" alt="图片"></p><h5 id="RedoLog"><a href="#RedoLog" class="headerlink" title="RedoLog"></a>RedoLog</h5><p>可以先通过下面demo理解：</p><p>饭点记账可以把账单写在<code>账本</code>上也可以写在<code>粉板</code>上。有人赊账或者还账的话，一般有两种做法：</p><blockquote><p>1、直接把账本翻出来，把这次赊的账加上去或者扣除掉。</p><p>2、先在粉板上记下这次的账，等打烊以后再把账本翻出来核算。</p></blockquote><p>生意忙时选后者，因为前者太麻烦了。得在密密麻麻的记录中找到这个人的赊账总额信息，找到之后再拿出算盘计算，最后再将结果写回到账本上。</p><p>同样在MySQL中如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程IO成本、查找成本都很高。而粉板和账本配合的整个过程就是MySQL用到的是Write-Ahead Logging 技术，它的关键点就是<code>先写日志，再写磁盘</code>。此时账本 = BinLog，粉板 = RedoLog。</p><blockquote><p>1、 记录更新时，InnoDB引擎就会先把记录写到RedoLog（粉板）里面，并更新内存。同时，InnoDB引擎会在空闲时将这个操作记录更新到磁盘里面。</p><p>2、 如果更新太多RedoLog处理不了的时候，需先将RedoLog部分数据写到磁盘，然后擦除RedoLog部分数据。RedoLog类似转盘。</p></blockquote><p>RedoLog有<code>write pos</code> 跟<code>checkpoint</code></p><blockquote><p><code>write pos</code> ：是当前记录的位置，一边写一边后移，写到第3号文件末尾后就回到0号文件开头。</p><p><code>check point</code>：是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p></blockquote><p>write pos和check point之间的是粉板上还空着的部分，可以用来记录新的操作。如果write pos追上checkpoint，表示粉板满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把checkpoint推进一下。</p><p>有了redo log，InnoDB就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为<code>crash-safe</code>。<img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dUQrRBUyxETV2RgzXuPqjscgO7ico0mApLjNfetKfiaSRovhW0hzcciav2OEibI4vOBAHEQUwG0K1Dtmw/640" alt="图片"></p><p><code>redolog两阶段提交</code>：为了让binlog跟redolog两份日志之间的逻辑一致。提交流程大致如下：</p><blockquote><p>1 prepare阶段 –&gt;  2 写binlog  –&gt; 3 commit</p></blockquote><ol><li>当在2之前崩溃时，重启恢复后发现没有commit，回滚。备份恢复：没有binlog 。一致</li><li>当在3之前崩溃时，重启恢复发现虽没有commit，但满足prepare和binlog完整，所以重启后会<code>自动</code>commit。备份：有binlog. 一致</li></ol><p><strong>binlog跟redolog区别</strong>：</p><ol><li>redo log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。</li><li>redo log是物理日志，记录的是在某个数据页上做了什么修改；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如给ID=2这一行的c字段加1。</li><li>redo log是循环写的，空间固定会用完；binlog是可以追加写入的。追加写是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><h5 id="UndoLog"><a href="#UndoLog" class="headerlink" title="UndoLog"></a>UndoLog</h5><p>UndoLog 一般是逻辑日志，主要分为两种：</p><ol><li>insert undo log</li></ol><blockquote><p>代表事务在insert新记录时产生的undo log, 只在事务回滚时需要，并且在事务提交后可以被立即丢弃</p></blockquote><ol><li>update undo log</li></ol><blockquote><p>事务在进行update或delete时产生的undo log; 不仅在事务回滚时需要，在快照读时也需要；所以不能随便删除，只有在快速读或事务回滚不涉及该日志时，对应的日志才会被purge线程统一清除</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mysql </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk动态代理</title>
      <link href="/2020/12/19/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2020/12/19/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h1><p><a href="https://blog.csdn.net/weixin_44207403/article/details/106736102?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159710420119724848303015%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=159710420119724848303015&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-3-106736102.pc_ecpm_v3_pc_rank_v3&amp;utm_term=spring&amp;spm=1018.2118.3001.4187" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44207403/article/details/106736102?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159710420119724848303015%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=159710420119724848303015&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-3-106736102.pc_ecpm_v3_pc_rank_v3&amp;utm_term=spring&amp;spm=1018.2118.3001.4187</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//解析beans.xml文件 , 生成管理相应的Bean对象</span></span><br><span class="line">   ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">   <span class="comment">//getBean : 参数即为spring配置文件中bean的id .</span></span><br><span class="line">   Hello hello = (Hello) context.getBean(<span class="string">"hello"</span>);</span><br><span class="line">   hello.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hello 对是谁创建的 ? hello 对象是由Spring创建的<br>Hello 对象的属性是怎么设置的 ? hello 对象的属性是由Spring容器设置的<br>这个过程就叫控制反转 :<br>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的<br>反转 : 程序本身不创建对象 , 而变成被动的接收对象 .<br>依赖注入 : 就是利用set方法来进行注入的.<br>IOC是一种编程思想，由主动的编程变成被动的接收</p><p>Bean的配置</p><!--bean就是java对象,由Spring创建和管理--><p>​    id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符<br>   如果配置id,又配置了name,那么name是别名<br>   name可以设置多个别名,可以用逗号,分号,空格隔开<br>   如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;</p><p>class是bean的全限定名=包名+类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hello"</span> <span class="attr">name</span>=<span class="string">"hello2 h2,h3;h4"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.Hello"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Spring"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JDK动态代理-1"><a href="#JDK动态代理-1" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p><strong>步骤：</strong></p><ol><li>创建一个实现接口InvocationHandler的类，它必须实现invoke方法</li><li>创建被代理的类以及接口</li><li>通过Proxy的静态方法newProxyInstance(ClassLoaderloader, Class[] interfaces, InvocationHandler h)创建一个代理</li><li>通过代理调用方法</li></ol><p><strong>实例：</strong></p><ul><li>实现接口InvocationHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvocationHandlerImpl</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object subject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvocationHandlerImpl</span><span class="params">(Object subject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject=subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"调用前"</span>+<span class="string">"method"</span>+method);</span><br><span class="line">        Object invoke = method.invoke(subject,args);</span><br><span class="line">        System.out.println(<span class="string">"调用后"</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建被代理的类以及接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">SayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">SayBye</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectImpl</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">SayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span> +name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">SayBye</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"bye"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建代理并调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyDemonstration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实对象</span></span><br><span class="line">        Subject realSubject = <span class="keyword">new</span> SubjectImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Proxy.newProxyInstance 的三个参数</span></span><br><span class="line">        <span class="comment">//获取代理的类</span></span><br><span class="line">        <span class="comment">//realSubject.getClass().getClassLoader()</span></span><br><span class="line">        <span class="comment">//获取代理的方法</span></span><br><span class="line">        <span class="comment">//realSubject.getClass().getInterfacs()</span></span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="comment">//InvocationHandlerImpl handler = new InvocationHandlerImpl(realSubject);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行动态代理</span></span><br><span class="line">        Subject subject = (Subject) Proxy.newProxyInstance(realSubject.getClass().getClassLoader(), realSubject.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandlerImpl(realSubject));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"代理的对象"</span>+subject.getClass().getName());</span><br><span class="line">        </span><br><span class="line">        String hello = subject.SayHello(<span class="string">"老李"</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/rgvlon.png" alt="image-20200918152317062"></p><h2 id="GCLIB动态代理"><a href="#GCLIB动态代理" class="headerlink" title="GCLIB动态代理"></a>GCLIB动态代理</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EasyExcel导出</title>
      <link href="/2020/12/05/EasyExcel/"/>
      <url>/2020/12/05/EasyExcel/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="EasyExcel导出"><a href="#EasyExcel导出" class="headerlink" title="EasyExcel导出"></a>EasyExcel导出</h1><p><a href="https://www.yuque.com/easyexcel/doc" target="_blank" rel="noopener"><strong>官方文档</strong></a></p><h2 id="采用web浏览器导出"><a href="#采用web浏览器导出" class="headerlink" title="采用web浏览器导出"></a><strong>采用web浏览器导出</strong></h2><p>方式一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">(HttpServletRequest request , HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            String filenames = <span class="string">"文件名"</span>;</span><br><span class="line">            String userAgent = request.getHeader(<span class="string">"User-Agent"</span>);</span><br><span class="line">            <span class="keyword">if</span> (userAgent.contains(<span class="string">"MSIE"</span>) || userAgent.contains(<span class="string">"Trident"</span>)) &#123;</span><br><span class="line">                filenames = URLEncoder.encode(filenames, <span class="string">"UTF-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                filenames = <span class="keyword">new</span> String(filenames.getBytes(<span class="string">"UTF-8"</span>), <span class="string">"ISO-8859-1"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            response.setContentType(<span class="string">"application/vnd.ms-exce"</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            response.addHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"filename="</span> + filenames + <span class="string">".xlsx"</span>);</span><br><span class="line">            EasyExcel.write(response.getOutputStream(), AppliancesExportData.class).sheet("sheet").doWrite(exportDataArrayList);</span><br><span class="line">        <span class="comment">//AppliancesExportData.class 是导出标题</span></span><br><span class="line">        <span class="comment">//"sheet"是页名</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二（官方写法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"downloadFailedUsingJson"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadFailedUsingJson</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 这里注意 有同学反应使用swagger 会导致各种问题，请直接用浏览器或者用postman</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">"application/vnd.ms-excel"</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">            String fileName = URLEncoder.encode(<span class="string">"测试"</span>, <span class="string">"UTF-8"</span>).replaceAll(<span class="string">"\\+"</span>, <span class="string">"%20"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment;filename*=utf-8''"</span> + fileName + <span class="string">".xlsx"</span>);</span><br><span class="line">            <span class="comment">// 这里需要设置不关闭流</span></span><br><span class="line">            EasyExcel.write(response.getOutputStream(), DownloadData.class).autoCloseStream(Boolean.FALSE).sheet("模板")</span><br><span class="line">                .doWrite(data());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 重置response</span></span><br><span class="line">            response.reset();</span><br><span class="line">            response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">            map.put(<span class="string">"status"</span>, <span class="string">"failure"</span>);</span><br><span class="line">            map.put(<span class="string">"message"</span>, <span class="string">"下载文件失败"</span> + e.getMessage());</span><br><span class="line">            response.getWriter().println(JSON.toJSONString(map));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>AppliancesExportData.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContentRowHeight</span>(<span class="number">90</span>)</span><br><span class="line"><span class="meta">@ColumnWidth</span>(<span class="number">16</span>) <span class="comment">//列宽</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AreaExportData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">25</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"区域编号"</span>)</span><br><span class="line">    <span class="keyword">private</span> String areaCode;</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"区域编号二维码"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] areaCodeBase64;</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"来访人员登记页面二维码"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] chevingAreaCodeBase64;</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"区域名称"</span>)</span><br><span class="line">    <span class="keyword">private</span> String areaName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a><strong>导入</strong></h2><p><strong>ExcelListener.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">ExcelModel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ExcelListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BATCH_COUNT = <span class="number">5</span>;</span><br><span class="line">    List&lt;ExcelModel&gt; list = <span class="keyword">new</span> ArrayList&lt;ExcelModel&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExcelListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(ExcelModel data, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"解析到一条数据:&#123;&#125;"</span>, JSON.toJSONString(data));</span><br><span class="line">        list.add(data);</span><br><span class="line">        <span class="comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            saveData();</span><br><span class="line">            <span class="comment">// 存储完成清理 list</span></span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成了 都会来调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span></span><br><span class="line">        saveData();</span><br><span class="line">        list.clear();</span><br><span class="line">        LOGGER.info(<span class="string">"所有数据解析完成！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"&#123;&#125;条数据，开始存储数据库！"</span>, list.size());</span><br><span class="line">        list.forEach(item -&gt; &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            *处理数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        &#125;);</span><br><span class="line">        LOGGER.info(<span class="string">"存储数据库成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DataImportService.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataImportService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExcelListener excelListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importUserData</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ExcelReader excelReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            excelReader = EasyExcel.read(inputStream, ExcelModel<span class="class">.<span class="keyword">class</span>, <span class="title">excelListener</span>).<span class="title">build</span>()</span>;</span><br><span class="line">            ReadSheet readSheet = EasyExcel.readSheet(<span class="number">0</span>).build();</span><br><span class="line">            excelReader.read(readSheet);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (excelReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                excelReader.finish();</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ExcelModel.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(<span class="string">"用户类型"</span>)<span class="comment">//标题名</span></span><br><span class="line">    <span class="keyword">private</span> String userType;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DataImportServiceTest.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataImportServiceTest</span> <span class="keyword">extends</span> <span class="title">WaterPlanApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataImportService dataImportService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\gitlab\\watersave-gd-zhaoqing2020\\water-resources-water-plan-api\\src\\main\\resources\\import\\取用水户基本信息导入模板.xlsx"</span>);</span><br><span class="line">        dataImportService.importUserData(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 导出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 导出 </tag>
            
            <tag> easyexcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot定时器</title>
      <link href="/2020/11/24/@Scheduled%E5%92%8CQuartz%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>/2020/11/24/@Scheduled%E5%92%8CQuartz%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Springboot定时器"><a href="#Springboot定时器" class="headerlink" title="Springboot定时器"></a>Springboot定时器</h1><hr><ul><li><h2 id="Scheduled"><a href="#Scheduled" class="headerlink" title="@Scheduled"></a>@Scheduled</h2></li></ul><p>步骤：</p><ol><li>启动类添加 <strong>@EnableScheduling</strong></li><li>在定时任务上添加<strong>@Scheduled</strong>注解 （注解上可以填写cron表达式）</li></ol><p>cron表达式</p><table><thead><tr><th align="left">序号</th><th align="left">说明</th><th align="left">是否必填</th><th align="left">允许填写的值</th><th align="left">允许的通配符</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">秒</td><td align="left">是</td><td align="left">0-59</td><td align="left">- * /</td></tr><tr><td align="left">2</td><td align="left">分</td><td align="left">是</td><td align="left">0-59</td><td align="left">- * /</td></tr><tr><td align="left">3</td><td align="left">时</td><td align="left">是</td><td align="left">0-23</td><td align="left">- * /</td></tr><tr><td align="left">4</td><td align="left">日</td><td align="left">是</td><td align="left">1-31</td><td align="left">- * ? / L W</td></tr><tr><td align="left">5</td><td align="left">月</td><td align="left">是</td><td align="left">1-12 or JAN-DEC</td><td align="left">- * /</td></tr><tr><td align="left">6</td><td align="left">周</td><td align="left">是</td><td align="left">1-7 or SUN-SAT</td><td align="left">- * ? / L #</td></tr><tr><td align="left">7</td><td align="left">年</td><td align="left">否</td><td align="left">1970-2099</td><td align="left">- * /</td></tr></tbody></table><p><strong>这一块需要大家注意的是，月份中的日期和星期可能会起冲突，因此在配置时这两个得有一个是 <code>?</code></strong></p><p><strong>通配符含义：</strong></p><ul><li><p><code>?</code> 表示不指定值，即不关心某个字段的取值时使用。需要注意的是，月份中的日期和星期可能会起冲突，因此在配置时这两个得有一个是 <code>?</code></p></li><li><p><code>*</code> 表示所有值，例如:在秒的字段上设置 <code>*</code>,表示每一秒都会触发</p></li><li><p><code>,</code> 用来分开多个值，例如在周字段上设置 “MON,WED,FRI” 表示周一，周三和周五触发</p></li><li><p><code>-</code> 表示区间，例如在秒上设置 “10-12”,表示 10,11,12秒都会触发</p></li><li><p><code>/</code> 用于递增触发，如在秒上面设置”5/15” 表示从5秒开始，每增15秒触发(5,20,35,50)</p></li><li><p><code>#</code> 序号(表示每月的第几个周几)，例如在周字段上设置”6#3”表示在每月的第三个周六，(用 在母亲节和父亲节再合适不过了)</p></li><li><p>周字段的设置，若使用英文字母是不区分大小写的 ，即 MON 与mon相同</p></li><li><p><code>L</code> 表示最后的意思。在日字段设置上，表示当月的最后一天(依据当前月份，如果是二月还会自动判断是否是润年), 在周字段上表示星期六，相当于”7”或”SAT”（注意周日算是第一天）。如果在”L”前加上数字，则表示该数据的最后一个。例如在周字段上设置”6L”这样的格式,则表示”本月最后一个星期五”</p></li><li><p><code>W</code> 表示离指定日期的最近工作日(周一至周五)，例如在日字段上设置”15W”，表示离每月15号最近的那个工作日触发。如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发，如果15号正好在工作日(周一至周五)，则就在该天触发。如果指定格式为 “1W”,它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。(注，”W”前只能设置具体的数字,不允许区间”-“)</p></li><li><p><code>L</code> 和 <code>W</code> 可以一组合使用。如果在日字段上设置”LW”,则表示在本月的最后一个工作日触发(一般指发工资 )</p><hr><ul><li><h2 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h2></li></ul></li></ul><p>在 Spring Boot 中使用 Quartz ，只需要在创建项目时，添加 Quartz 依赖即可：</p><p><img src= "/img/loading.gif" data-src="https://www.javaboy.org/images/boot/6-1.png" alt="img"></p><p>步骤：</p><ol><li><p>启动类添加 <strong>@EnableScheduling</strong></p></li><li><p>创建JobDetail（要做的事）</p><ul><li><p>先定义Job （实体类，有两种方式实现）</p><ul><li><p>第一种方式，直接定义一个Bean：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyJob1 &#123;</span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;MyJob1&gt;&gt;&gt;&quot;+new Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关于这种定义方式说两点：</p><ol><li>首先将这个 Job 注册到 Spring 容器中。</li><li>这种定义方式有一个缺陷，就是无法传参。</li></ol></li><li><p>第二种定义方式，则是继承 QuartzJobBean 并实现默认的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class MyJob2 extends QuartzJobBean &#123;</span><br><span class="line">    HelloService helloService;</span><br><span class="line">    public HelloService getHelloService() &#123;</span><br><span class="line">        return helloService;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setHelloService(HelloService helloService) &#123;</span><br><span class="line">        this.helloService &#x3D; helloService;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;</span><br><span class="line">        helloService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class HelloService &#123;</span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;hello service &gt;&gt;&gt;&quot;+new Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>和第1种方式相比，这种方式支持传参，任务启动时，executeInternal 方法将会被执行。</strong></p></li></ul></li><li><p>Trigger 触发器（什么时候做）</p><p>Job 有了之后，接下来创建类，配置 JobDetail 和 Trigger 触发器，如下：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class QuartzConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    MethodInvokingJobDetailFactoryBean methodInvokingJobDetailFactoryBean() &#123;</span><br><span class="line">        MethodInvokingJobDetailFactoryBean bean &#x3D; new MethodInvokingJobDetailFactoryBean();</span><br><span class="line">        bean.setTargetBeanName(&quot;myJob1&quot;);</span><br><span class="line">        bean.setTargetMethod(&quot;sayHello&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    JobDetailFactoryBean jobDetailFactoryBean() &#123;</span><br><span class="line">        JobDetailFactoryBean bean &#x3D; new JobDetailFactoryBean();</span><br><span class="line">        bean.setJobClass(MyJob2.class);</span><br><span class="line">        JobDataMap map &#x3D; new JobDataMap();</span><br><span class="line">        map.put(&quot;helloService&quot;, helloService());</span><br><span class="line">        bean.setJobDataMap(map);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    SimpleTriggerFactoryBean simpleTriggerFactoryBean() &#123;</span><br><span class="line">        SimpleTriggerFactoryBean bean &#x3D; new SimpleTriggerFactoryBean();</span><br><span class="line">        bean.setStartTime(new Date());</span><br><span class="line">        bean.setRepeatCount(5);</span><br><span class="line">        bean.setJobDetail(methodInvokingJobDetailFactoryBean().getObject());</span><br><span class="line">        bean.setRepeatInterval(3000);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    CronTriggerFactoryBean cronTrigger() &#123;</span><br><span class="line">        CronTriggerFactoryBean bean &#x3D; new CronTriggerFactoryBean();</span><br><span class="line">        bean.setCronExpression(&quot;0&#x2F;10 * * * * ?&quot;);</span><br><span class="line">        bean.setJobDetail(jobDetailFactoryBean().getObject());</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    SchedulerFactoryBean schedulerFactoryBean() &#123;</span><br><span class="line">        SchedulerFactoryBean bean &#x3D; new SchedulerFactoryBean();</span><br><span class="line">        bean.setTriggers(cronTrigger().getObject(), simpleTriggerFactoryBean().getObject());</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    HelloService helloService() &#123;</span><br><span class="line">        return new HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这个配置说如下几点：</p><ol><li>JobDetail 的配置有两种方式：MethodInvokingJobDetailFactoryBean 和 JobDetailFactoryBean 。</li><li>使用 MethodInvokingJobDetailFactoryBean 可以配置目标 Bean 的名字和目标方法的名字，这种方式不支持传参。</li><li>使用 JobDetailFactoryBean 可以配置 JobDetail ，任务类继承自 QuartzJobBean ，这种方式支持传参，将参数封装在 JobDataMap 中进行传递。</li><li>Trigger 是指触发器，Quartz 中定义了多个触发器，这里向大家展示其中两种的用法，SimpleTrigger 和 CronTrigger 。</li><li>SimpleTrigger 有点类似于前面说的 @Scheduled 的基本用法。</li><li>CronTrigger 则有点类似于 @Scheduled 中 cron 表达式的用法。</li></ol><p><img src= "/img/loading.gif" data-src="https://www.javaboy.org/images/boot/6-2.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 定时器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2020/11/21/Linux/"/>
      <url>/2020/11/21/Linux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Linux-系统目录结构"><a href="#Linux-系统目录结构" class="headerlink" title="Linux 系统目录结构"></a>Linux 系统目录结构</h1><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls/</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://www.runoob.com/wp-content/uploads/2014/06/4_20.png" alt="img" style="zoom:150%;"><p><img src= "/img/loading.gif" data-src="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="img"></p><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/rgjfP0.jpg" alt="目錄樹架構示意圖"></p><p>以下是对这些目录的解释：</p><ul><li><p><strong>/bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>/boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>/dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>/etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>/home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>/lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>/lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>/media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>/opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></li><li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>/sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>/selinux</strong>：<br> 这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>/srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>/sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>/tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>/usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>/usr/src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>/var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>/etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在 /bin/ls 目录下的。</p><p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给 root 使用的指令。</p><p><strong>/var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 /var/log 目录下，另外 mail 的预设放置也是在这里。</p><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/rgjYbd.gif" alt="檔案屬性的示意圖"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIt使用</title>
      <link href="/2020/11/20/Git/"/>
      <url>/2020/11/20/Git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="GIt使用"><a href="#GIt使用" class="headerlink" title="GIt使用"></a><strong>GIt使用</strong></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"# 编辑内容"</span> &gt;&gt;README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git add （提交的文件   文件夹名称或者文件）</span><br><span class="line">git commit -m <span class="string">"提交信息"</span></span><br><span class="line">git remote add origin https:<span class="comment">//github.com/xxx/xxx.git （报错可以移除掉已存在的origin git remote rm origin）</span></span><br><span class="line"><span class="comment">//git pull  可以先和远程同步一下</span></span><br><span class="line">git push -u origin 分支名        (报错可以强制替换掉  git push -f origin 分支名)</span><br></pre></td></tr></table></figure><h2 id="git-push可能出现的错误"><a href="#git-push可能出现的错误" class="headerlink" title="git push可能出现的错误"></a><strong>git push可能出现的错误</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">![rejected]  master-&gt;master(fetch first)  </span><br><span class="line">error:failed to push some refs to <span class="string">'https://github.com/xxx/xxx.git'</span></span><br><span class="line">原因 </span><br><span class="line">在远程仓库已经添加了README.md</span><br><span class="line">需要先pull一下</span><br><span class="line">$git pull</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> ! [rejected]        master -&gt; master (non-fast-forward) </span><br><span class="line"> error: failed to push some refs to <span class="string">'https://github.com/xxx/xxx.git'</span></span><br><span class="line">原因  </span><br><span class="line">本地和远程未同步</span><br><span class="line">$git pull origin master --allow-unrelated-histories <span class="comment">//把远程仓库和本地同步，消除差异</span></span><br><span class="line">$git add</span><br><span class="line">$git commit -m <span class="string">""</span></span><br><span class="line">$git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a><strong>操作</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .（提交的文件   文件夹名称或者文件）</span><br><span class="line">git commit -m &quot;提交信息&quot;</span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.git </span><br><span class="line">git pull origin master --allow-unrelated-histories &#x2F;&#x2F;把远程仓库和本地同步，消除差异</span><br><span class="line">$git push -u origin master (push前最好消除一下差异)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jxls导出</title>
      <link href="/2020/11/13/jxls-springboot%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BAExcel%E6%8A%A5%E8%A1%A8/"/>
      <url>/2020/11/13/jxls-springboot%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BAExcel%E6%8A%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="jxls导出Excel"><a href="#jxls导出Excel" class="headerlink" title="jxls导出Excel"></a>jxls导出Excel</h1><hr><p><a href="http://jxls.sourceforge.net/index.html" target="_blank" rel="noopener"><strong>官方文档</strong></a></p><h2 id="设置Excel模板"><a href="#设置Excel模板" class="headerlink" title="设置Excel模板"></a>设置Excel模板</h2><p><img src= "/img/loading.gif" data-src="/2020/11/13/jxls-springboot%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BAExcel%E6%8A%A5%E8%A1%A8/E:%5CDDesktop%5C%E7%AC%94%E8%AE%B0%5CExcel%E6%A8%A1%E6%9D%BF.png" alt="Excel模板"></p><ul><li><h3 id="jx-area-lastCell-”B3”-模板作用区域-为A1到B3-需在第一单元格内指出作用区域"><a href="#jx-area-lastCell-”B3”-模板作用区域-为A1到B3-需在第一单元格内指出作用区域" class="headerlink" title="jx:area(lastCell=”B3”)  :  模板作用区域  为A1到B3    (需在第一单元格内指出作用区域)"></a>jx:area(lastCell=”B3”)  :  模板作用区域  为A1到B3    (需在第一单元格内指出作用区域)</h3></li><li><h3 id="jx-each-items-”user”-var-”u”-lastCell-”B3”-user-是-Map-集合或-List-集合的键名或集合名"><a href="#jx-each-items-”user”-var-”u”-lastCell-”B3”-user-是-Map-集合或-List-集合的键名或集合名" class="headerlink" title="jx:each(items=”user”,var=”u”,lastCell=”B3”)  :  user 是  Map 集合或 List 集合的键名或集合名"></a>jx:each(items=”user”,var=”u”,lastCell=”B3”)  :  user 是  Map 集合或 List 集合的键名或集合名</h3></li></ul><h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.jxls&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jxls&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.8.1&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.jxls&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jxls-poi&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.8.1&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.jxls&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jxls-jexcel&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.0.9&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="源代码-省去实体类"><a href="#源代码-省去实体类" class="headerlink" title="源代码 (省去实体类)"></a>源代码 (省去实体类)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String template = <span class="string">"/test1.xlsx"</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        execute();<span class="comment">//可转换成springboot接口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Opening input stream"</span>);</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"E://DDesktop/out.xlsx"</span>);<span class="comment">//换成指定文件 出现错误    不换 下载下来是压缩包</span></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"1"</span>,<span class="string">"1"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">"1"</span>,<span class="string">"1"</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">"1"</span>,<span class="string">"1"</span>);</span><br><span class="line">        users.add(user1);</span><br><span class="line">        users.add(user2);</span><br><span class="line">        users.add(user3);</span><br><span class="line">        template = ExcelTest<span class="class">.<span class="keyword">class</span>.<span class="title">getResource</span>(<span class="title">template</span>).<span class="title">getPath</span>()</span>;</span><br><span class="line">        HashMap&lt;String, Object&gt; model = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        model.put(<span class="string">"user"</span>, users);</span><br><span class="line">        <span class="comment">//template 为模板路径：eg:leadshow.xls，</span></span><br><span class="line">        <span class="comment">// JxlsExporter.class.getResourceAsStream(template)—&gt; leadshow.xls模板路径需放置在该类包路径下</span></span><br><span class="line">        String path = <span class="keyword">new</span> File(<span class="string">""</span>).getAbsolutePath()+<span class="string">"/src/main/resources/test1.xlsx"</span>;</span><br><span class="line">        <span class="keyword">try</span> (InputStream is = <span class="keyword">new</span> FileInputStream(path)) &#123;</span><br><span class="line">            <span class="comment">//output 为导出的Excel路径，有一个坑需要注意的是，在springboot项目打包成jar包之后，</span></span><br><span class="line">            <span class="comment">//导出文件路径可这样表示： System.getProperty("user.dir") + "/export_leadshow.xls"，这种"static/export_leadshow.xls"路径会失效</span></span><br><span class="line">                Context context = <span class="keyword">new</span> PoiContext();</span><br><span class="line">                context.putVar(<span class="string">"user"</span>, users);</span><br><span class="line">                JxlsHelper.getInstance().processTemplate(is, os, context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态导出"><a href="#动态导出" class="headerlink" title="动态导出"></a>动态导出</h2><h3 id="GridCommandDemo"><a href="#GridCommandDemo" class="headerlink" title="GridCommandDemo"></a><strong>GridCommandDemo</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * Created by Leonid Vysochyn on 30-Jun-15.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GridCommandDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GridCommandDemo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> ParseException, IOException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"Running Grid command demo"</span>);</span><br><span class="line">        List&lt;Employee&gt; employees = Employee.generateSampleEmployeeData();</span><br><span class="line">        executeGridMatrixDemo(employees);</span><br><span class="line">        executeGridObjectListDemo(employees);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeGridMatrixDemo</span><span class="params">(List&lt;Employee&gt; employees)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        List&lt;List&lt;Object&gt;&gt; data = createGridData(employees);</span><br><span class="line">        try(InputStream is = GridCommandDemo.class.getResourceAsStream("grid_template.xls")) &#123;</span><br><span class="line">            <span class="keyword">try</span> (OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"target/grid_output1.xls"</span>)) &#123;</span><br><span class="line">                Context context = <span class="keyword">new</span> Context();</span><br><span class="line">                context.putVar(<span class="string">"headers"</span>, Arrays.asList(<span class="string">"Name"</span>, <span class="string">"Birthday"</span>, <span class="string">"Payment"</span>));</span><br><span class="line">                context.putVar(<span class="string">"data"</span>, data);</span><br><span class="line">                JxlsHelper.getInstance().processTemplate(is, os, context);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeGridObjectListDemo</span><span class="params">(List&lt;Employee&gt; employees)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        try (InputStream is = GridCommandDemo.class.getResourceAsStream("grid_template.xls")) &#123;</span><br><span class="line">            <span class="keyword">try</span> (OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"target/grid_output2.xls"</span>)) &#123;</span><br><span class="line">                Context context = <span class="keyword">new</span> Context();</span><br><span class="line">                context.putVar(<span class="string">"headers"</span>, Arrays.asList(<span class="string">"Name"</span>, <span class="string">"Birthday"</span>, <span class="string">"Payment"</span>));</span><br><span class="line">                context.putVar(<span class="string">"data"</span>, employees);</span><br><span class="line">                JxlsHelper.getInstance().processGridTemplateAtCell(is, os, context, <span class="string">"name,birthDate,payment"</span>, <span class="string">"Sheet2!A1"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// also used by IssueB090Test</span></span><br><span class="line">    <span class="comment">//对象集合封装成集合集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Object&gt;&gt; createGridData(List&lt;Employee&gt; employees) &#123;</span><br><span class="line">        List&lt;List&lt;Object&gt;&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">            data.add( convertEmployeeToList(employee));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将对象转换成list</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title">convertEmployeeToList</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(employee.getName());</span><br><span class="line">        list.add(employee.getBirthDate());</span><br><span class="line">        list.add(employee.getPayment());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 导出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 导出 </tag>
            
            <tag> jxls </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Shiro</title>
      <link href="/2020/10/28/ShiroDemo/"/>
      <url>/2020/10/28/ShiroDemo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ShiroDemo"><a href="#ShiroDemo" class="headerlink" title="ShiroDemo"></a>ShiroDemo</h1><ul><li><h2 id="代码目录"><a href="#代码目录" class="headerlink" title="代码目录"></a><strong>代码目录</strong></h2></li></ul><p><img src= "/img/loading.gif" data-src="/img/image-20201010142130618.png" alt="image-20201010142130618"></p><h2 id="shiroConfig-class"><a href="#shiroConfig-class" class="headerlink" title="shiroConfig.class"></a><strong>shiroConfig.class</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">shiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager</span></span><br><span class="line">    <span class="comment">//UserRealm</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(@Qualifier(<span class="string">"securityManager"</span>)</span> DefaultWebSecurityManager securityManager) </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean factoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//添加shiro的内置过滤器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            anon: 无需认证就可访问</span></span><br><span class="line"><span class="comment">            authc：必须认证才能访问</span></span><br><span class="line"><span class="comment">            user：必须拥有记住我功能才能访问</span></span><br><span class="line"><span class="comment">            perms: 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">            role:拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">"/user/add"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/user/update"</span>, <span class="string">"perms[update]"</span>);</span><br><span class="line">        <span class="comment">//退出路径</span></span><br><span class="line">        filterMap.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line"></span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="comment">//设置登录url</span></span><br><span class="line">        factoryBean.setLoginUrl(<span class="string">"/toLogin"</span>);</span><br><span class="line">        <span class="comment">//没有权限跳转</span></span><br><span class="line">        factoryBean.setUnauthorizedUrl(<span class="string">"/noauth"</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"securityManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(@Qualifier(<span class="string">"userRealm"</span>)</span> UserRealm userRealm) </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//关联userRelam</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"userRealm"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserRealm userRealm = <span class="keyword">new</span> UserRealm();</span><br><span class="line">        <span class="comment">//userRealm.setCredentialsMatcher(getHashedCredentialsMatcher()); //设置加密器</span></span><br><span class="line">        <span class="keyword">return</span> userRealm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    //加密 </span></span><br><span class="line"><span class="comment">    <span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">    public HashedCredentialsMatcher getHashedCredentialsMatcher()&#123;</span></span><br><span class="line"><span class="comment">        HashedCredentialsMatcher matcher = new HashedCredentialsMatcher();</span></span><br><span class="line"><span class="comment">        //散列算法，这里使用md5</span></span><br><span class="line"><span class="comment">        matcher.setHashAlgorithmName("md5");//加密算法名称</span></span><br><span class="line"><span class="comment">        matcher.setHashIterations(1);//加密次数</span></span><br><span class="line"><span class="comment">        matcher.setStoredCredentialsHexEncoded(true);</span></span><br><span class="line"><span class="comment">        return matcher;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//整合thymeleaf</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">getShiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UserRealm"><a href="#UserRealm" class="headerlink" title="UserRealm"></a><strong>UserRealm</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行doGetAuthorizationInfo---&gt;授权"</span>);</span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//获取当前角色</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        User currentUser = (User) subject.getPrincipal();</span><br><span class="line">        <span class="comment">//根据当前用户获取权限</span></span><br><span class="line">        List&lt;Role&gt; role = userService.getRoleByUsername(currentUser.getUsername());</span><br><span class="line">        System.out.println(role);</span><br><span class="line">        role.forEach(item-&gt;&#123;</span><br><span class="line">            info.addStringPermission(item.getPerm());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行doGetAuthenticationInfo---&gt;认证"</span>);</span><br><span class="line">        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        User user = userService.getUserByUsername(token.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == user)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">        &#125;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        Session session = subject.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">"loginUser"</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码加密 盐值</span></span><br><span class="line">        ByteSource credentialsSalt = ByteSource.Util.bytes(user.getUsername());</span><br><span class="line">        <span class="comment">//密码加密写法 ↑--↓</span></span><br><span class="line">        SimpleAuthenticationInfo info = <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(), credentialsSalt, user.getUsername());<span class="comment">//需要ShiroConfig 写一个bean 返回HashedCredentialsMatcher </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*不加密写法</span></span><br><span class="line"><span class="comment">        SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(user, user.getPassword(),user.getUsername());</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a><strong>UserController</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(&#123;<span class="string">"/"</span>,<span class="string">"/index"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello shiro"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"add"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"update"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/toLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tologin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username,String password,Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取当前用户</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//封装用户登录数据</span></span><br><span class="line">        UsernamePasswordToken token =<span class="keyword">new</span> UsernamePasswordToken(username,password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownAccountException e)&#123;<span class="comment">//用户名不存在</span></span><br><span class="line">            model.addAttribute(<span class="string">"msg"</span>,<span class="string">"用户名错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            model.addAttribute(<span class="string">"msg"</span>,<span class="string">"密码错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/noauth"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">unauthorized</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"未授权界面"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a><strong>UserService</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        User user = userMapper.getUserByUsername(username);</span><br><span class="line">        List&lt;Role&gt; list = userMapper.getRoleByRoleId(user.getRoleId());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleByRoleId</span><span class="params">(Integer roleId)</span> </span>&#123;</span><br><span class="line">        List&lt;Role&gt; list = userMapper.getRoleByRoleId(roleId);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        User user = userMapper.getUserByUsername(username);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UserMapper"><a href="#UserMapper" class="headerlink" title="UserMapper"></a><strong>UserMapper</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from role where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">getRoleByRoleId</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer roleId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where username = #&#123;username&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserByUsername</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Role"><a href="#Role" class="headerlink" title="Role"></a><strong>Role</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String perm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="User"><a href="#User" class="headerlink" title="User"></a><strong>User</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ShiroDemoApplication"><a href="#ShiroDemoApplication" class="headerlink" title="ShiroDemoApplication"></a><strong>ShiroDemoApplication</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.zxj.shiro_demo.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ShiroDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a><strong>index.html</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf,org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-shiro"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">"$&#123;session.loginUser==null&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/toLogin&#125;"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">"$&#123;session.loginUser!=null&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/logout&#125;"</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span><span class="comment">&lt;!--shiro:hasPermission="add"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/add&#125;"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/update&#125;"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a><strong>login.html</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf,org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="add-html"><a href="#add-html" class="headerlink" title="add.html"></a><strong>add.html</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>add<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">add</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="update-html"><a href="#update-html" class="headerlink" title="update.html"></a><strong>update.html</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>update<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">update</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a><strong>application.properties</strong></h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/shirotest?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8088</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.zxj.shiro_demo.model</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2020/10/21/mysql/"/>
      <url>/2020/10/21/mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="结构化查询语句分类"><a href="#结构化查询语句分类" class="headerlink" title="结构化查询语句分类"></a>结构化查询语句分类</h2><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/r2pMcV.png" alt="640"></p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>创建数据库：create database [if not exists] 数据库名;</p><p>删除数据库 : drop database [if exists] 数据库名;</p><p>查看数据库 : show databases;</p><p>使用数据库 : use 数据库名;</p><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a><strong>创建数据表</strong></h3><p>属于DDL的一种，语法 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table [if not exists] &#96;表名&#96;(</span><br><span class="line">    &#39;字段名1&#39; 列类型 [属性][索引][注释],</span><br><span class="line">    &#39;字段名2&#39; 列类型 [属性][索引][注释],</span><br><span class="line">    #...</span><br><span class="line">    &#39;字段名n&#39; 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure><p><strong>说明 :</strong> 反引号用于区别MySQL保留字与普通字符而引入的 (键盘esc下面的键).</p><h3 id="数据值和列类型"><a href="#数据值和列类型" class="headerlink" title="数据值和列类型"></a><strong>数据值和列类型</strong></h3><p>列类型 : 规定数据库中该列存放的数据类型</p><p><strong>数值类型</strong></p><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/r2pvuT.png" alt></p><p><strong>字符串类型</strong></p><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/r2pOg0.png" alt></p><p><strong>日期和时间型数值类型</strong></p><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/r2pXvV.png" alt></p><p><strong>NULL值</strong></p><ul><li>理解为 “没有值” 或 “未知值”</li><li>不要用NULL进行算术运算 , 结果仍为NULL</li></ul><h3 id="数据字段属性"><a href="#数据字段属性" class="headerlink" title="数据字段属性"></a><strong>数据字段属性</strong></h3><p><strong>UnSigned</strong></p><ul><li>无符号的</li><li>声明该数据列不允许负数 .</li></ul><p><strong>ZEROFILL</strong></p><ul><li>0填充的</li><li>不足位数的用0来填充 , 如int(3),5则为005</li></ul><p><strong>Auto_InCrement</strong></p><ul><li><p>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</p></li><li><p>通常用于设置<strong>主键</strong> , 且为整数类型</p></li><li><p>可定义起始值和步长</p></li><li><ul><li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li><li>SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li></ul></li></ul><p><strong>NULL 和 NOT NULL</strong></p><ul><li>默认为NULL , 即没有插入该列的数值</li><li>如果设置为NOT NULL , 则该列必须有值</li></ul><p><strong>DEFAULT</strong></p><ul><li>默认的</li><li>用于设置默认值</li><li>例如,性别字段,默认为”男” , 否则为 “女” ; 若无指定该列的值 , 则默认值为”男”的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 目标 : 创建一个school数据库</span><br><span class="line">-- 创建学生表(列,字段)</span><br><span class="line">-- 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email</span><br><span class="line">-- 创建表之前 , 一定要先选择数据库</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;student&#96; (</span><br><span class="line">&#96;id&#96; int(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,</span><br><span class="line">&#96;name&#96; varchar(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,</span><br><span class="line">&#96;pwd&#96; varchar(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;密码&#39;,</span><br><span class="line">&#96;sex&#96; varchar(2) NOT NULL DEFAULT &#39;男&#39; COMMENT &#39;性别&#39;,</span><br><span class="line">&#96;birthday&#96; datetime DEFAULT NULL COMMENT &#39;生日&#39;,</span><br><span class="line">&#96;address&#96; varchar(100) DEFAULT NULL COMMENT &#39;地址&#39;,</span><br><span class="line">&#96;email&#96; varchar(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class="line">PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">-- 查看数据库的定义</span><br><span class="line">SHOW CREATE DATABASE school;</span><br><span class="line">-- 查看数据表的定义</span><br><span class="line">SHOW CREATE TABLE student;</span><br><span class="line">-- 显示表结构</span><br><span class="line">DESC student;  -- 设置严格检查模式(不能容错了)SET sql_mode&#x3D;&#39;STRICT_TRANS_TABLES&#39;;</span><br></pre></td></tr></table></figure><h3 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a><strong>数据表的类型</strong></h3><p><strong>设置数据表的类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">   -- 省略一些代码</span><br><span class="line">   -- Mysql注释</span><br><span class="line">   -- 1. # 单行注释</span><br><span class="line">   -- 2. &#x2F;*...*&#x2F; 多行注释</span><br><span class="line">)ENGINE &#x3D; MyISAM (or InnoDB)</span><br><span class="line"></span><br><span class="line">-- 查看mysql所支持的引擎类型 (表类型)</span><br><span class="line">SHOW ENGINES;</span><br></pre></td></tr></table></figure><p>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…</p><p>常见的 MyISAM 与 InnoDB 类型：</p><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/r29a5j.png" alt></p><p>经验 ( 适用场合 )  :</p><ul><li>适用 MyISAM : 节约空间及相应速度</li><li>适用 InnoDB : 安全性 , 事务处理及多用户操作数据表</li></ul><p><strong>数据表的存储位置</strong></p><ul><li><p>MySQL数据表以文件方式存放在磁盘中</p></li><li><ul><li>包括表文件 , 数据文件 , 以及数据库的选项文件</li><li>位置 : Mysql安装目录\data\下存放数据表 . 目录名对应数据库名 , 该目录下文件名对应数据表 .</li></ul></li><li><p>注意 :</p></li><li><ul><li>* . frm – 表结构定义文件</li><li>* . MYD – 数据文件 ( data )</li><li>* . MYI – 索引文件 ( index )</li><li>InnoDB类型数据表只有一个 *.frm文件 , 以及上一级目录的ibdata1文件</li><li>MyISAM类型数据表对应三个文件 :</li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/rgv8J0.png" alt></p><p><strong>设置数据表字符集</strong></p><p>我们可为数据库,数据表,数据列设定不同的字符集，设定方法 :</p><ul><li>创建时通过命令来设置 , 如 : CREATE TABLE 表名()CHARSET = utf8;</li><li>如无设定 , 则根据MySQL数据库配置文件 my.ini 中的参数设定</li></ul><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a><strong>修改数据库</strong></h3><p><strong>修改表 ( ALTER TABLE )</strong></p><p>修改表名 :ALTER TABLE 旧表名 RENAME AS 新表名</p><p>添加字段 : ALTER TABLE 表名 ADD字段名 列属性[属性]</p><p>修改字段 :</p><ul><li>ALTER TABLE 表名 MODIFY 字段名 列类型[属性]</li><li>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性[属性]</li></ul><p>删除字段 :  ALTER TABLE 表名 DROP 字段名</p><p><strong>删除数据表</strong></p><p>语法：DROP TABLE [IF EXISTS] 表名</p><ul><li>IF EXISTS为可选 , 判断是否存在该数据表</li><li>如删除不存在的数据表会抛出错误</li></ul><p><strong>其他</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. 可用反引号（&#96;）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line"></span><br><span class="line">2. 每个库目录存在一个保存当前数据库的选项文件db.opt。</span><br><span class="line"></span><br><span class="line">3. 注释：</span><br><span class="line">  单行注释 # 注释内容</span><br><span class="line">  多行注释 &#x2F;* 注释内容 *&#x2F;</span><br><span class="line">  单行注释 -- 注释内容       (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span><br><span class="line">   </span><br><span class="line">4. 模式通配符：</span><br><span class="line">  _   任意单个字符</span><br><span class="line">  %   任意多个字符，甚至包括零字符</span><br><span class="line">  单引号需要进行转义 \&#39;</span><br><span class="line">   </span><br><span class="line">5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\G&quot;, &quot;\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span><br><span class="line"></span><br><span class="line">6. SQL对大小写不敏感 （关键字）</span><br><span class="line"></span><br><span class="line">7. 清除已有语句：\c</span><br></pre></td></tr></table></figure><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a><strong>外键</strong></h3><blockquote><p><strong>概念</strong></p></blockquote><p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为<strong>主表</strong>，具有此外键的表被称为主表的<strong>从表</strong>。</p><p>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(<strong>foreign key</strong>)。</p><blockquote><p><strong>外键作用</strong></p></blockquote><p>保持数据<strong>一致性</strong>，<strong>完整性</strong>，主要目的是控制存储在外键表中的数据,<strong>约束</strong>。使两张表形成关联，外键只能引用外表中的列的值或使用空值。</p><blockquote><p><strong>创建外键</strong></p></blockquote><p>建表时指定外键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 创建外键的方式一 : 创建子表同时创建外键</span><br><span class="line"></span><br><span class="line">-- 年级表 (id\年级名称)</span><br><span class="line">CREATE TABLE &#96;grade&#96; (</span><br><span class="line">  &#96;gradeid&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;年级ID&#39;,</span><br><span class="line">  &#96;gradename&#96; VARCHAR(50) NOT NULL COMMENT &#39;年级名称&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;gradeid&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">-- 学生信息表 (学号,姓名,性别,年级,手机,地址,出生日期,邮箱,身份证号)</span><br><span class="line">CREATE TABLE &#96;student&#96; (</span><br><span class="line">  &#96;studentno&#96; INT(4) NOT NULL COMMENT &#39;学号&#39;,</span><br><span class="line">  &#96;studentname&#96; VARCHAR(20) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,</span><br><span class="line">  &#96;sex&#96; TINYINT(1) DEFAULT &#39;1&#39; COMMENT &#39;性别&#39;,</span><br><span class="line">  &#96;gradeid&#96; INT(10) DEFAULT NULL COMMENT &#39;年级&#39;,</span><br><span class="line">  &#96;phoneNum&#96; VARCHAR(50) NOT NULL COMMENT &#39;手机&#39;,</span><br><span class="line">  &#96;address&#96; VARCHAR(255) DEFAULT NULL COMMENT &#39;地址&#39;,</span><br><span class="line">  &#96;borndate&#96; DATETIME DEFAULT NULL COMMENT &#39;生日&#39;,</span><br><span class="line">  &#96;email&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class="line">  &#96;idCard&#96; VARCHAR(18) DEFAULT NULL COMMENT &#39;身份证号&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;studentno&#96;),</span><br><span class="line">  KEY &#96;FK_gradeid&#96; (&#96;gradeid&#96;),</span><br><span class="line">  CONSTRAINT &#96;FK_gradeid&#96; FOREIGN KEY (&#96;gradeid&#96;) REFERENCES &#96;grade&#96; (&#96;gradeid&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure><p>建表后修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 创建外键方式二 : 创建子表完毕后,修改子表添加外键</span><br><span class="line">ALTER TABLE &#96;student&#96;</span><br><span class="line">ADD CONSTRAINT &#96;FK_gradeid&#96; FOREIGN KEY (&#96;gradeid&#96;) REFERENCES &#96;grade&#96; (&#96;gradeid&#96;);</span><br></pre></td></tr></table></figure><blockquote><p>删除外键</p></blockquote><p>操作：删除 grade 表，发现报错</p><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LCI6xGKJ7bKiaBudOSBHd9dAFiaLn6yfOjQtCB0o2bo5uaJH6GKpmGXVCbrFKSzQOeMKpPbG57dIgA/640" alt="img"></p><p><strong>注意</strong> : 删除具有主外键关系的表时 , 要先删子表 , 后删主表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 删除外键</span><br><span class="line">ALTER TABLE student DROP FOREIGN KEY FK_gradeid;</span><br><span class="line">-- 发现执行完上面的,索引还在,所以还要删除索引</span><br><span class="line">-- 注:这个索引是建立外键的时候默认生成的</span><br><span class="line">ALTER TABLE student DROP INDEX FK_gradeid;</span><br></pre></td></tr></table></figure><h2 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h2><p><strong>数据库意义</strong> ： 数据存储、数据管理</p><p><strong>管理数据库数据方法：</strong></p><ul><li>通过SQLyog等管理工具管理数据库数据</li><li>通过<strong>DML语句</strong>管理数据库数据</li></ul><p><strong>DML语言</strong>  ：数据操作语言</p><ul><li><p>用于操作数据库对象中所包含的数据</p></li><li><p>包括 :</p></li><li><ul><li>INSERT (添加数据语句)</li><li>UPDATE (更新数据语句)</li><li>DELETE (删除数据语句)</li></ul></li></ul><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a><strong>添加数据</strong></h3><blockquote><p>INSERT命令</p></blockquote><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;)</span><br></pre></td></tr></table></figure><p><strong>注意 :</strong> </p><ul><li>字段或值之间用英文逗号隔开 .</li><li>‘ 字段1,字段2…’ 该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致 .</li><li>可同时插入多条数据 , values 后用英文逗号隔开 .</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 使用语句如何增加语句?</span><br><span class="line">-- 语法 : INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;)</span><br><span class="line">INSERT INTO grade(gradename) VALUES (&#39;大一&#39;);</span><br><span class="line"></span><br><span class="line">-- 主键自增,那能否省略呢?</span><br><span class="line">INSERT INTO grade VALUES (&#39;大二&#39;);</span><br><span class="line"></span><br><span class="line">-- 查询:INSERT INTO grade VALUE (&#39;大二&#39;)错误代码：1136</span><br><span class="line">Column count doesn&#96;t match value count at row 1</span><br><span class="line"></span><br><span class="line">-- 结论:&#39;字段1,字段2...&#39;该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致.</span><br><span class="line"></span><br><span class="line">-- 一次插入多条数据</span><br><span class="line">INSERT INTO grade(gradename) VALUES (&#39;大三&#39;),(&#39;大四&#39;);</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a><strong>修改数据</strong></h3><blockquote><p>update命令</p></blockquote><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 SET column_name&#x3D;value [,column_name2&#x3D;value2,...] [WHERE condition];</span><br></pre></td></tr></table></figure><p><strong>注意 :</strong> </p><ul><li>column_name 为要更改的数据列</li><li>value 为修改后的数据 , 可以为变量 , 具体指 , 表达式或者嵌套的SELECT结果</li><li>condition 为筛选条件 , 如不指定则修改该表的所有列数据</li></ul><blockquote><p>where条件子句</p></blockquote><p>可以简单的理解为 : 有条件地从表中筛选数据</p><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LCI6xGKJ7bKiaBudOSBHd9dyJWPxp3H9GicphPXMEvCwtUyKX3vibUCESqSaDnKnLzlwYpcRTJsdUIg/640" alt="img">测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 修改年级信息</span><br><span class="line">UPDATE grade SET gradename &#x3D; &#39;高中&#39; WHERE gradeid &#x3D; 1;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a><strong>删除数据</strong></h3><blockquote><p>DELETE命令</p></blockquote><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名 [WHERE condition];</span><br></pre></td></tr></table></figure><p>注意：condition为筛选条件 , 如不指定则删除该表的所有列数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除最后一个数据</span><br><span class="line">DELETE FROM grade WHERE gradeid &#x3D; 5</span><br></pre></td></tr></table></figure><blockquote><p>TRUNCATE命令</p></blockquote><p>作用：用于完全清空表数据 , 但表结构 , 索引 , 约束等不变 ;</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE [TABLE] table_name;</span><br><span class="line">-- 清空年级表</span><br><span class="line">TRUNCATE grade</span><br></pre></td></tr></table></figure><p><strong>注意：区别于DELETE命令</strong></p><ul><li><p>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p></li><li><p>不同 :</p></li><li><ul><li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</li><li>使用TRUNCATE TABLE不会对事务有影响 （事务后面会说）</li></ul></li></ul><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 创建一个测试表</span><br><span class="line">CREATE TABLE &#96;test&#96; (</span><br><span class="line">  &#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;coll&#96; VARCHAR(20) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">-- 插入几个测试数据</span><br><span class="line">INSERT INTO test(coll) VALUES(&#39;row1&#39;),(&#39;row2&#39;),(&#39;row3&#39;);</span><br><span class="line"></span><br><span class="line">-- 删除表数据(不带where条件的delete)</span><br><span class="line">DELETE FROM test;</span><br><span class="line">-- 结论:如不指定Where则删除该表的所有列数据,自增当前值依然从原来基础上进行,会记录日志.</span><br><span class="line"></span><br><span class="line">-- 删除表数据(truncate)</span><br><span class="line">TRUNCATE TABLE test;</span><br><span class="line">-- 结论:truncate删除数据,自增当前值会恢复到初始值重新开始;不会记录日志.</span><br><span class="line"></span><br><span class="line">-- 同样使用DELETE清空不同引擎的数据库表数据.重启数据库服务后</span><br><span class="line">-- InnoDB : 自增列从初始值重新开始 (因为是存储在内存中,断电即失)</span><br><span class="line">-- MyISAM : 自增列依然从上一个自增数据基础上开始 (存在文件中,不会丢失)</span><br></pre></td></tr></table></figure><h2 id="DQL语言"><a href="#DQL语言" class="headerlink" title="DQL语言"></a>DQL语言</h2><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>SELECT语法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT [ALL | DISTINCT]</span><br><span class="line">&#123;* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]&#125;</span><br><span class="line">FROM table_name [as table_alias]</span><br><span class="line">    [left | right | inner join table_name2]  -- 联合查询</span><br><span class="line">    [WHERE ...]  -- 指定结果需满足的条件</span><br><span class="line">    [GROUP BY ...]  -- 指定结果按照哪几个字段来分组</span><br><span class="line">    [HAVING]  -- 过滤分组的记录必须满足的次要条件</span><br><span class="line">    [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序</span><br><span class="line">    [LIMIT &#123;[offset,]row_count | row_countOFFSET offset&#125;];</span><br><span class="line">    --  指定查询的记录从哪条至哪条</span><br></pre></td></tr></table></figure><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h3 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 查询表中所有的数据列结果 , 采用 **&quot; \* &quot;** 符号; 但是效率低，不推荐 .</span><br><span class="line"></span><br><span class="line">-- 查询所有学生信息</span><br><span class="line">SELECT * FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询指定列(学号 , 姓名)</span><br><span class="line">SELECT studentno,studentname FROM student;</span><br></pre></td></tr></table></figure><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 这里是为列取别名(当然as关键词可以省略)</span><br><span class="line">SELECT studentno AS 学号,studentname AS 姓名 FROM student;</span><br><span class="line"></span><br><span class="line">-- 使用as也可以为表取别名</span><br><span class="line">SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;</span><br><span class="line"></span><br><span class="line">-- 使用as,为查询结果取一个新名字</span><br><span class="line">-- CONCAT()函数拼接字符串</span><br><span class="line">SELECT CONCAT(&#39;姓名:&#39;,studentname) AS 新姓名 FROM student;</span><br></pre></td></tr></table></figure><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- # 查看哪些同学参加了考试(学号)  去除重复项</span><br><span class="line">SELECT * FROM result; -- 查看考试成绩</span><br><span class="line">SELECT studentno FROM result; --  查看哪些同学参加了考试</span><br><span class="line">SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)</span><br></pre></td></tr></table></figure><blockquote><p>使用表达式的列</p></blockquote><p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p><p>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- selcet查询中可以使用表达式</span><br><span class="line">SELECT @@auto_increment_increment; -- 查询自增步长</span><br><span class="line">SELECT VERSION(); -- 查询版本号</span><br><span class="line">SELECT 100*3-1 AS 计算结果; -- 表达式</span><br><span class="line"></span><br><span class="line">-- 学员考试成绩集体提分一分查看</span><br><span class="line">SELECT studentno,StudentResult+1 AS &#39;提分后&#39; FROM result;</span><br></pre></td></tr></table></figure></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h3 id="where条件语句"><a href="#where条件语句" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><blockquote><p>逻辑操作符</p></blockquote><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640" alt="img"></p><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 满足条件的查询(where)</span><br><span class="line">SELECT Studentno,StudentResult FROM result;</span><br><span class="line"></span><br><span class="line">-- 查询考试成绩在95-100之间的</span><br><span class="line">SELECT Studentno,StudentResult</span><br><span class="line">FROM result</span><br><span class="line">WHERE StudentResult&gt;&#x3D;95 AND StudentResult&lt;&#x3D;100;</span><br><span class="line"></span><br><span class="line">-- AND也可以写成 &amp;&amp;</span><br><span class="line">SELECT Studentno,StudentResult</span><br><span class="line">FROM result</span><br><span class="line">WHERE StudentResult&gt;&#x3D;95 &amp;&amp; StudentResult&lt;&#x3D;100;</span><br><span class="line"></span><br><span class="line">-- 模糊查询(对应的词:精确查询)</span><br><span class="line">SELECT Studentno,StudentResult</span><br><span class="line">FROM result</span><br><span class="line">WHERE StudentResult BETWEEN 95 AND 100;</span><br><span class="line"></span><br><span class="line">-- 除了1000号同学,要其他同学的成绩</span><br><span class="line">SELECT studentno,studentresult</span><br><span class="line">FROM result</span><br><span class="line">WHERE studentno!&#x3D;1000;</span><br><span class="line"></span><br><span class="line">-- 使用NOT</span><br><span class="line">SELECT studentno,studentresult</span><br><span class="line">FROM result</span><br><span class="line">WHERE NOT studentno&#x3D;1000;</span><br></pre></td></tr></table></figure><blockquote><p>模糊查询 ：比较操作符</p></blockquote><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640" alt="img"></p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">-- 模糊查询 between and \ like \ in \ null</span><br><span class="line"></span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- LIKE</span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- 查询姓刘的同学的学号及姓名</span><br><span class="line">-- like结合使用的通配符 : % (代表0到任意个字符)  _ (一个字符)</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;刘%&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询姓刘的同学,后面只有一个字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;刘_&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询姓刘的同学,后面只有两个字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;刘__&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名中含有 嘉 字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;%嘉%&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名中含有特殊字符的需要使用转义符号 &#39;\&#39;</span><br><span class="line">-- 自定义转义符关键字:  ESCAPE &#39;:&#39;</span><br><span class="line"></span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- IN</span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- 查询学号为1000,1001,1002的学生姓名</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentno IN (1000,1001,1002);</span><br><span class="line"></span><br><span class="line">-- 查询地址在北京,南京,河南洛阳的学生</span><br><span class="line">SELECT studentno,studentname,address FROM student</span><br><span class="line">WHERE address IN (&#39;北京&#39;,&#39;南京&#39;,&#39;河南洛阳&#39;);</span><br><span class="line"></span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- NULL 空</span><br><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- 查询出生日期没有填写的同学</span><br><span class="line">-- 不能直接写&#x3D;NULL , 这是代表错误的 , 用 is null</span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE BornDate IS NULL;</span><br><span class="line"></span><br><span class="line">-- 查询出生日期填写的同学</span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE BornDate IS NOT NULL;</span><br><span class="line"></span><br><span class="line">-- 查询没有写家庭住址的同学(空字符串不等于null)</span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE Address&#x3D;&#39;&#39; OR Address IS NULL;</span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640" alt="img"></p><p>七种Join：</p><p><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDw5aZLehIYzwLprCfqdxSjsm2wficHrSEzJiaJBGaKWpatQ7sISib9MgCQ/640" alt="img"></p><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">连接查询</span><br><span class="line">    如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询</span><br><span class="line">内连接 inner join</span><br><span class="line">    查询两个表中的结果集中的交集</span><br><span class="line">外连接 outer join</span><br><span class="line">    左外连接 left join</span><br><span class="line">        (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)</span><br><span class="line">    右外连接 right join</span><br><span class="line">        (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)</span><br><span class="line">        </span><br><span class="line">等值连接和非等值连接</span><br><span class="line"></span><br><span class="line">自连接</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT * FROM result;</span><br><span class="line"></span><br><span class="line">&#x2F;*思路:</span><br><span class="line">(1):分析需求,确定查询的列来源于两个类,student  result,连接查询</span><br><span class="line">(2):确定使用哪种连接查询?(内连接)</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line">-- 右连接(也可实现)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">RIGHT JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line">-- 等值连接</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s , result r</span><br><span class="line">WHERE r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line">-- 左连接 (查询了所有同学,不考试的也会查出来)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">LEFT JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line">-- 查一下缺考的同学(左连接应用场景)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">LEFT JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">WHERE StudentResult IS NULL</span><br></pre></td></tr></table></figure><blockquote><p>自连接</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">自连接</span><br><span class="line">    数据表与自身进行连接</span><br><span class="line"></span><br><span class="line">需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中</span><br><span class="line">     查询父栏目名称和其他子栏目名称</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 创建一个表</span><br><span class="line">CREATE TABLE &#96;category&#96; (</span><br><span class="line">  &#96;categoryid&#96; INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT &#39;主题id&#39;,</span><br><span class="line">  &#96;pid&#96; INT(10) NOT NULL COMMENT &#39;父id&#39;,</span><br><span class="line">  &#96;categoryName&#96; VARCHAR(50) NOT NULL COMMENT &#39;主题名字&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;categoryid&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;9 DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">INSERT INTO &#96;category&#96; (&#96;categoryid&#96;, &#96;pid&#96;, &#96;categoryName&#96;)</span><br><span class="line">VALUES(&#39;2&#39;,&#39;1&#39;,&#39;信息技术&#39;),</span><br><span class="line">(&#39;3&#39;,&#39;1&#39;,&#39;软件开发&#39;),</span><br><span class="line">(&#39;4&#39;,&#39;3&#39;,&#39;数据库&#39;),</span><br><span class="line">(&#39;5&#39;,&#39;1&#39;,&#39;美术设计&#39;),</span><br><span class="line">(&#39;6&#39;,&#39;3&#39;,&#39;web开发&#39;),</span><br><span class="line">(&#39;7&#39;,&#39;5&#39;,&#39;ps技术&#39;),</span><br><span class="line">(&#39;8&#39;,&#39;2&#39;,&#39;办公信息&#39;);</span><br><span class="line"></span><br><span class="line">-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)</span><br><span class="line">-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)</span><br><span class="line">SELECT a.categoryName AS &#39;父栏目&#39;,b.categoryName AS &#39;子栏目&#39;</span><br><span class="line">FROM category AS a,category AS b</span><br><span class="line">WHERE a.&#96;categoryid&#96;&#x3D;b.&#96;pid&#96;</span><br><span class="line"></span><br><span class="line">-- 查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON sub.subjectno &#x3D; r.subjectno</span><br><span class="line"></span><br><span class="line">-- 查询学员及所属的年级(学号,学生姓名,年级名)</span><br><span class="line">SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN grade g</span><br><span class="line">ON s.&#96;GradeId&#96; &#x3D; g.&#96;GradeID&#96;</span><br><span class="line"></span><br><span class="line">-- 查询科目及所属的年级(科目名称,年级名称)</span><br><span class="line">SELECT subjectname AS 科目名称,gradename AS 年级名称</span><br><span class="line">FROM SUBJECT sub</span><br><span class="line">INNER JOIN grade g</span><br><span class="line">ON sub.gradeid &#x3D; g.gradeid</span><br><span class="line"></span><br><span class="line">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.subjectno &#x3D; sub.subjectno</span><br><span class="line">WHERE subjectname&#x3D;&#39;数据库结构-1&#39;</span><br></pre></td></tr></table></figure><h3 id="排序和分页"><a href="#排序和分页" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 排序 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">语法 : ORDER BY</span><br><span class="line">    ORDER BY 语句用于根据指定的列对结果集进行排序。</span><br><span class="line">    ORDER BY 语句默认按照ASC升序对记录进行排序。</span><br><span class="line">    如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。</span><br><span class="line">    </span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="line">-- 按成绩降序排序</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.subjectno &#x3D; sub.subjectno</span><br><span class="line">WHERE subjectname&#x3D;&#39;数据库结构-1&#39;</span><br><span class="line">ORDER BY StudentResult DESC</span><br><span class="line"></span><br><span class="line">&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 分页 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset</span><br><span class="line">好处 : (用户体验,网络传输,查询压力)</span><br><span class="line"></span><br><span class="line">推导:</span><br><span class="line">    第一页 : limit 0,5</span><br><span class="line">    第二页 : limit 5,5</span><br><span class="line">    第三页 : limit 10,5</span><br><span class="line">    ......</span><br><span class="line">    第N页 : limit (pageNo-1)*pageSzie,pageSzie</span><br><span class="line">    [pageNo:页码,pageSize:单页面显示条数]</span><br><span class="line">    </span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 每页显示5条数据</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.subjectno &#x3D; sub.subjectno</span><br><span class="line">WHERE subjectname&#x3D;&#39;数据库结构-1&#39;</span><br><span class="line">ORDER BY StudentResult DESC , studentno</span><br><span class="line">LIMIT 0,5</span><br><span class="line"></span><br><span class="line">-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.subjectno &#x3D; sub.subjectno</span><br><span class="line">WHERE subjectname&#x3D;&#39;JAVA第一学年&#39;</span><br><span class="line">ORDER BY StudentResult DESC</span><br><span class="line">LIMIT 0,10</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 子查询 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">什么是子查询?</span><br><span class="line">    在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句</span><br><span class="line">    嵌套查询可由多个子查询组成,求解的方式是由里及外;</span><br><span class="line">    子查询返回的结果一般都是集合,故而建议使用IN关键字;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列</span><br><span class="line">-- 方法一:使用连接查询</span><br><span class="line">SELECT studentno,r.subjectno,StudentResult</span><br><span class="line">FROM result r</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.&#96;SubjectNo&#96;&#x3D;sub.&#96;SubjectNo&#96;</span><br><span class="line">WHERE subjectname &#x3D; &#39;数据库结构-1&#39;</span><br><span class="line">ORDER BY studentresult DESC;</span><br><span class="line"></span><br><span class="line">-- 方法二:使用子查询(执行顺序:由里及外)</span><br><span class="line">SELECT studentno,subjectno,StudentResult</span><br><span class="line">FROM result</span><br><span class="line">WHERE subjectno&#x3D;(</span><br><span class="line">    SELECT subjectno FROM &#96;subject&#96;</span><br><span class="line">    WHERE subjectname &#x3D; &#39;数据库结构-1&#39;</span><br><span class="line">)</span><br><span class="line">ORDER BY studentresult DESC;</span><br><span class="line"></span><br><span class="line">-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名</span><br><span class="line">-- 方法一:使用连接查询</span><br><span class="line">SELECT s.studentno,studentname</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON s.&#96;StudentNo&#96; &#x3D; r.&#96;StudentNo&#96;</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON sub.&#96;SubjectNo&#96; &#x3D; r.&#96;SubjectNo&#96;</span><br><span class="line">WHERE subjectname &#x3D; &#39;高等数学-2&#39; AND StudentResult&gt;&#x3D;80</span><br><span class="line"></span><br><span class="line">-- 方法二:使用连接查询+子查询</span><br><span class="line">-- 分数不小于80分的学生的学号和姓名</span><br><span class="line">SELECT r.studentno,studentname FROM student s</span><br><span class="line">INNER JOIN result r ON s.&#96;StudentNo&#96;&#x3D;r.&#96;StudentNo&#96;</span><br><span class="line">WHERE StudentResult&gt;&#x3D;80</span><br><span class="line"></span><br><span class="line">-- 在上面SQL基础上,添加需求:课程为 高等数学-2</span><br><span class="line">SELECT r.studentno,studentname FROM student s</span><br><span class="line">INNER JOIN result r ON s.&#96;StudentNo&#96;&#x3D;r.&#96;StudentNo&#96;</span><br><span class="line">WHERE StudentResult&gt;&#x3D;80 AND subjectno&#x3D;(</span><br><span class="line">    SELECT subjectno FROM &#96;subject&#96;</span><br><span class="line">    WHERE subjectname &#x3D; &#39;高等数学-2&#39;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">-- 方法三:使用子查询</span><br><span class="line">-- 分步写简单sql语句,然后将其嵌套起来</span><br><span class="line">SELECT studentno,studentname FROM student WHERE studentno IN(</span><br><span class="line">    SELECT studentno FROM result WHERE StudentResult&gt;&#x3D;80 AND subjectno&#x3D;(</span><br><span class="line">        SELECT subjectno FROM &#96;subject&#96; WHERE subjectname &#x3D; &#39;高等数学-2&#39;</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p><strong>数据函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT ABS(-8);  &#x2F;*绝对值*&#x2F;</span><br><span class="line">SELECT CEILING(9.4); &#x2F;*向上取整*&#x2F;</span><br><span class="line">SELECT FLOOR(9.4);   &#x2F;*向下取整*&#x2F;</span><br><span class="line">SELECT RAND();  &#x2F;*随机数,返回一个0-1之间的随机数*&#x2F;</span><br><span class="line">SELECT SIGN(0); &#x2F;*符号函数: 负数返回-1,正数返回1,0返回0*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>字符串函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT CHAR_LENGTH(&#39;狂神说坚持就能成功&#39;); &#x2F;*返回字符串包含的字符数*&#x2F;</span><br><span class="line">SELECT CONCAT(&#39;我&#39;,&#39;爱&#39;,&#39;程序&#39;);  &#x2F;*合并字符串,参数可以有多个*&#x2F;</span><br><span class="line">SELECT INSERT(&#39;我爱编程helloworld&#39;,1,2,&#39;超级热爱&#39;);  &#x2F;*替换字符串,从某个位置开始替换某个长度*&#x2F;</span><br><span class="line">SELECT LOWER(&#39;KuangShen&#39;); &#x2F;*小写*&#x2F;</span><br><span class="line">SELECT UPPER(&#39;KuangShen&#39;); &#x2F;*大写*&#x2F;</span><br><span class="line">SELECT LEFT(&#39;hello,world&#39;,5);   &#x2F;*从左边截取*&#x2F;</span><br><span class="line">SELECT RIGHT(&#39;hello,world&#39;,5);  &#x2F;*从右边截取*&#x2F;</span><br><span class="line">SELECT REPLACE(&#39;狂神说坚持就能成功&#39;,&#39;坚持&#39;,&#39;努力&#39;);  &#x2F;*替换字符串*&#x2F;</span><br><span class="line">SELECT SUBSTR(&#39;狂神说坚持就能成功&#39;,4,6); &#x2F;*截取字符串,开始和长度*&#x2F;</span><br><span class="line">SELECT REVERSE(&#39;狂神说坚持就能成功&#39;); &#x2F;*反转</span><br><span class="line"></span><br><span class="line">-- 查询姓周的同学,改成邹</span><br><span class="line">SELECT REPLACE(studentname,&#39;周&#39;,&#39;邹&#39;) AS 新名字</span><br><span class="line">FROM student WHERE studentname LIKE &#39;周%&#39;;</span><br></pre></td></tr></table></figure><p><strong>日期和时间函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_DATE();   &#x2F;*获取当前日期*&#x2F;</span><br><span class="line">SELECT CURDATE();   &#x2F;*获取当前日期*&#x2F;</span><br><span class="line">SELECT NOW();   &#x2F;*获取当前日期和时间*&#x2F;</span><br><span class="line">SELECT LOCALTIME();   &#x2F;*获取当前日期和时间*&#x2F;</span><br><span class="line">SELECT SYSDATE();   &#x2F;*获取当前日期和时间*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 获取年月日,时分秒</span><br><span class="line">SELECT YEAR(NOW());</span><br><span class="line">SELECT MONTH(NOW());</span><br><span class="line">SELECT DAY(NOW());</span><br><span class="line">SELECT HOUR(NOW());</span><br><span class="line">SELECT MINUTE(NOW());</span><br><span class="line">SELECT SECOND(NOW());</span><br></pre></td></tr></table></figure><p><strong>系统信息函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION();  &#x2F;*版本*&#x2F;</span><br><span class="line">SELECT USER();     &#x2F;*用户*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 聚合函数</span><br><span class="line">&#x2F;*COUNT:非空的*&#x2F;</span><br><span class="line">SELECT COUNT(studentname) FROM student;</span><br><span class="line">SELECT COUNT(*) FROM student;</span><br><span class="line">SELECT COUNT(1) FROM student;  &#x2F;*推荐*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。</span><br><span class="line">-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</span><br><span class="line">-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；</span><br><span class="line">-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。</span><br><span class="line">&#x2F;*</span><br><span class="line">很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。</span><br><span class="line"></span><br><span class="line">下面它们之间的一些对比：</span><br><span class="line"></span><br><span class="line">1）在表没有主键时，count(1)比count(*)快</span><br><span class="line">2）有主键时，主键作为计算条件，count(主键)效率最高；</span><br><span class="line">3）若表格只有一个字段，则count(*)效率较高。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT SUM(StudentResult) AS 总和 FROM result;</span><br><span class="line">SELECT AVG(StudentResult) AS 平均分 FROM result;</span><br><span class="line">SELECT MAX(StudentResult) AS 最高分 FROM result;</span><br><span class="line">SELECT MIN(StudentResult) AS 最低分 FROM result;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 查询不同课程的平均分,最高分,最低分</span><br><span class="line">-- 前提:根据不同的课程进行分组</span><br><span class="line"></span><br><span class="line">SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分</span><br><span class="line">FROM result AS r</span><br><span class="line">INNER JOIN &#96;subject&#96; AS s</span><br><span class="line">ON r.subjectno &#x3D; s.subjectno</span><br><span class="line">GROUP BY r.subjectno</span><br><span class="line">HAVING 平均分&gt;80;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">where写在group by前面.</span><br><span class="line">要是放在分组后面的筛选</span><br><span class="line">要使用HAVING..</span><br><span class="line">因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p>MD5 加密</p></blockquote><p><strong>一、MD5简介</strong></p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><p><strong>二、实现数据加密</strong></p><p>新建一个表 testmd5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;testmd5&#96; (</span><br><span class="line">  &#96;id&#96; INT(4) NOT NULL,</span><br><span class="line">  &#96;name&#96; VARCHAR(20) NOT NULL,</span><br><span class="line">  &#96;pwd&#96; VARCHAR(50) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure><p>插入一些数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO testmd5 VALUES(1,&#39;kuangshen&#39;,&#39;123456&#39;),(2,&#39;qinjiang&#39;,&#39;456789&#39;)</span><br></pre></td></tr></table></figure><p>如果我们要对pwd这一列数据进行加密，语法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update testmd5 set pwd &#x3D; md5(pwd);</span><br></pre></td></tr></table></figure><p>如果单独对某个用户(如kuangshen)的密码加密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO testmd5 VALUES(3,&#39;kuangshen2&#39;,&#39;123456&#39;)</span><br><span class="line">update testmd5 set pwd &#x3D; md5(pwd) where name &#x3D; &#39;kuangshen2&#39;;</span><br></pre></td></tr></table></figure><p>插入新的数据自动加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO testmd5 VALUES(4,&#39;kuangshen3&#39;,md5(&#39;123456&#39;));</span><br></pre></td></tr></table></figure><p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM testmd5 WHERE &#96;name&#96;&#x3D;&#39;kuangshen&#39; AND pwd&#x3D;MD5(&#39;123456&#39;);</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 内置函数 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">-- 数值函数</span><br><span class="line">abs(x)            -- 绝对值 abs(-10.9) &#x3D; 10</span><br><span class="line">format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) &#x3D; 1,234,567.46</span><br><span class="line">ceil(x)            -- 向上取整 ceil(10.1) &#x3D; 11</span><br><span class="line">floor(x)        -- 向下取整 floor (10.1) &#x3D; 10</span><br><span class="line">round(x)        -- 四舍五入去整</span><br><span class="line">mod(m, n)        -- m%n m mod n 求余 10%3&#x3D;1</span><br><span class="line">pi()            -- 获得圆周率</span><br><span class="line">pow(m, n)        -- m^n</span><br><span class="line">sqrt(x)            -- 算术平方根</span><br><span class="line">rand()            -- 随机数</span><br><span class="line">truncate(x, d)    -- 截取d位小数</span><br><span class="line"></span><br><span class="line">-- 时间日期函数</span><br><span class="line">now(), current_timestamp();     -- 当前日期时间</span><br><span class="line">current_date();                    -- 当前日期</span><br><span class="line">current_time();                    -- 当前时间</span><br><span class="line">date(&#39;yyyy-mm-dd hh:ii:ss&#39;);    -- 获取日期部分</span><br><span class="line">time(&#39;yyyy-mm-dd hh:ii:ss&#39;);    -- 获取时间部分</span><br><span class="line">date_format(&#39;yyyy-mm-dd hh:ii:ss&#39;, &#39;%d %y %a %d %m %b %j&#39;);    -- 格式化时间</span><br><span class="line">unix_timestamp();                -- 获得unix时间戳</span><br><span class="line">from_unixtime();                -- 从时间戳获得时间</span><br><span class="line"></span><br><span class="line">-- 字符串函数</span><br><span class="line">length(string)            -- string长度，字节</span><br><span class="line">char_length(string)        -- string的字符个数</span><br><span class="line">substring(str, position [,length])        -- 从str的position开始,取length个字符</span><br><span class="line">replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_str</span><br><span class="line">instr(string ,substring)    -- 返回substring首次在string中出现的位置</span><br><span class="line">concat(string [,...])    -- 连接字串</span><br><span class="line">charset(str)            -- 返回字串字符集</span><br><span class="line">lcase(string)            -- 转换成小写</span><br><span class="line">left(string, length)    -- 从string2中的左边起取length个字符</span><br><span class="line">load_file(file_name)    -- 从文件读取内容</span><br><span class="line">locate(substring, string [,start_position])    -- 同instr,但可指定开始位置</span><br><span class="line">lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为length</span><br><span class="line">ltrim(string)            -- 去除前端空格</span><br><span class="line">repeat(string, count)    -- 重复count次</span><br><span class="line">rpad(string, length, pad)    --在str后用pad补充,直到长度为length</span><br><span class="line">rtrim(string)            -- 去除后端空格</span><br><span class="line">strcmp(string1 ,string2)    -- 逐字符比较两字串大小</span><br><span class="line"></span><br><span class="line">-- 聚合函数</span><br><span class="line">count()</span><br><span class="line">sum();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line"></span><br><span class="line">-- 其他常用函数</span><br><span class="line">md5();</span><br><span class="line">default();</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>什么是事务</p></blockquote><ul><li>事务就是将一组SQL语句放在同一批次内去执行</li><li>如果一个SQL语句出错,则该批次内的所有SQL都将被取消执行</li><li>MySQL事务处理只支持InnoDB和BDB数据表类型</li></ul><blockquote><p>事务的ACID原则  百度 ACID</p></blockquote><h3 id="原子性-Atomic"><a href="#原子性-Atomic" class="headerlink" title="原子性(Atomic)"></a><strong>原子性(Atomic)</strong></h3><ul><li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</li></ul><h3 id="一致性-Consist"><a href="#一致性-Consist" class="headerlink" title="一致性(Consist)"></a><strong>一致性(Consist)</strong></h3><ul><li>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</li></ul><h3 id="隔离性-Isolated"><a href="#隔离性-Isolated" class="headerlink" title="隔离性(Isolated)"></a><strong>隔离性(Isolated)</strong></h3><ul><li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li></ul><h3 id="持久性-Durable"><a href="#持久性-Durable" class="headerlink" title="持久性(Durable)"></a><strong>持久性(Durable)</strong></h3><ul><li>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li></ul><blockquote><p><strong>基本语法</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 使用set语句来改变自动提交模式</span><br><span class="line">SET autocommit &#x3D; 0;   &#x2F;*关闭*&#x2F;</span><br><span class="line">SET autocommit &#x3D; 1;   &#x2F;*开启*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 注意:</span><br><span class="line">---  1.MySQL中默认是自动提交</span><br><span class="line">---  2.使用事务时应先关闭自动提交</span><br><span class="line"></span><br><span class="line">-- 开始一个事务,标记事务的起始点</span><br><span class="line">START TRANSACTION  </span><br><span class="line"></span><br><span class="line">-- 提交一个事务给数据库</span><br><span class="line">COMMIT</span><br><span class="line"></span><br><span class="line">-- 将事务回滚,数据回到本次事务的初始状态</span><br><span class="line">ROLLBACK</span><br><span class="line"></span><br><span class="line">-- 还原MySQL数据库的自动提交</span><br><span class="line">SET autocommit &#x3D;1;</span><br><span class="line"></span><br><span class="line">-- 保存点</span><br><span class="line">SAVEPOINT 保存点名称 -- 设置一个事务保存点</span><br><span class="line">ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点</span><br><span class="line">RELEASE SAVEPOINT 保存点名称 -- 删除保存点</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">测试题目</span><br><span class="line">A在线买一款价格为500元商品,网上银行转账.</span><br><span class="line">A的银行卡余额为2000,然后给商家B支付500.</span><br><span class="line">商家B一开始的银行卡余额为10000</span><br><span class="line"></span><br><span class="line">创建数据库shop和创建表account并插入2条数据</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE &#96;shop&#96;CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">USE &#96;shop&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;account&#96; (</span><br><span class="line">  &#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; VARCHAR(32) NOT NULL,</span><br><span class="line">  &#96;cash&#96; DECIMAL(9,2) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">INSERT INTO account (&#96;name&#96;,&#96;cash&#96;)</span><br><span class="line">VALUES(&#39;A&#39;,2000.00),(&#39;B&#39;,10000.00)</span><br><span class="line"></span><br><span class="line">-- 转账实现</span><br><span class="line">SET autocommit &#x3D; 0; -- 关闭自动提交</span><br><span class="line">START TRANSACTION;  -- 开始一个事务,标记事务的起始点</span><br><span class="line">UPDATE account SET cash&#x3D;cash-500 WHERE &#96;name&#96;&#x3D;&#39;A&#39;;</span><br><span class="line">UPDATE account SET cash&#x3D;cash+500 WHERE &#96;name&#96;&#x3D;&#39;B&#39;;</span><br><span class="line">COMMIT; -- 提交事务</span><br><span class="line"># rollback;</span><br><span class="line">SET autocommit &#x3D; 1; -- 恢复自动提交</span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>索引的作用</p></blockquote><ul><li>提高查询速度</li><li>确保数据的唯一性</li><li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li><li>使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间</li><li>全文检索字段进行搜索优化.</li></ul><blockquote><p>分类</p></blockquote><ul><li>主键索引 (Primary Key)</li><li>唯一索引 (Unique)</li><li>常规索引 (Index)</li><li>全文索引 (FullText)</li></ul><blockquote><p>主键索引</p></blockquote><p>主键 : 某一个属性组能唯一标识一条记录</p><p>特点 :</p><ul><li>最常见的索引类型</li><li>确保数据记录的唯一性</li><li>确定特定数据记录在数据库中的位置</li></ul><blockquote><p>唯一索引</p></blockquote><p>作用 : 避免同一个表中某数据列中的值重复</p><p>与主键索引的区别</p><ul><li>主键索引只能有一个</li><li>唯一索引可能有多个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;Grade&#96;(</span><br><span class="line">    &#96;GradeID&#96; INT(11) AUTO_INCREMENT PRIMARYKEY,</span><br><span class="line">    &#96;GradeName&#96; VARCHAR(32) NOT NULL UNIQUE</span><br><span class="line">    -- 或 UNIQUE KEY &#96;GradeID&#96; (&#96;GradeID&#96;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>常规索引</p></blockquote><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>index 和 key 关键字都可以设置常规索引</li><li>应加在查询找条件的字段</li><li>不宜添加太多常规索引,影响数据的插入,删除和修改操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;result&#96;(</span><br><span class="line">    -- 省略一些代码</span><br><span class="line">    INDEX&#x2F;KEY &#96;ind&#96; (&#96;studentNo&#96;,&#96;subjectNo&#96;) -- 创建表时添加</span><br><span class="line">)</span><br><span class="line">-- 创建后添加</span><br><span class="line">ALTER TABLE &#96;result&#96; ADD INDEX &#96;ind&#96;(&#96;studentNo&#96;,&#96;subjectNo&#96;);</span><br></pre></td></tr></table></figure><blockquote><p>全文索引</p></blockquote><p>百度搜索：全文索引</p><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>只能用于MyISAM类型的数据表</li><li>只能用于CHAR , VARCHAR , TEXT数据列类型</li><li>适合大型数据集</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">#方法一：创建表时</span><br><span class="line">    　　CREATE TABLE 表名 (</span><br><span class="line">                字段名1  数据类型 [完整性约束条件…],</span><br><span class="line">                字段名2  数据类型 [完整性约束条件…],</span><br><span class="line">                [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY</span><br><span class="line">                [索引名]  (字段名[(长度)]  [ASC |DESC])</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方法二：CREATE在已存在的表上创建索引</span><br><span class="line">        CREATE  [UNIQUE | FULLTEXT | SPATIAL ]  INDEX  索引名</span><br><span class="line">                     ON 表名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方法三：ALTER TABLE在已存在的表上创建索引</span><br><span class="line">        ALTER TABLE 表名 ADD  [UNIQUE | FULLTEXT | SPATIAL ] INDEX</span><br><span class="line">                             索引名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line">                            </span><br><span class="line">                            </span><br><span class="line">#删除索引：DROP INDEX 索引名 ON 表名字;</span><br><span class="line">#删除主键索引: ALTER TABLE 表名 DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#显示索引信息: SHOW INDEX FROM student;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*增加全文索引*&#x2F;</span><br><span class="line">ALTER TABLE &#96;school&#96;.&#96;student&#96; ADD FULLTEXT INDEX &#96;studentname&#96; (&#96;StudentName&#96;);</span><br><span class="line"></span><br><span class="line">&#x2F;*EXPLAIN : 分析SQL语句执行性能*&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM student WHERE studentno&#x3D;&#39;1000&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;*使用全文索引*&#x2F;</span><br><span class="line">-- 全文搜索通过 MATCH() 函数完成。</span><br><span class="line">-- 搜索字符串作为 against() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即，在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。</span><br><span class="line">EXPLAIN SELECT *FROM student WHERE MATCH(studentname) AGAINST(&#39;love&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">开始之前，先说一下全文索引的版本、存储引擎、数据类型的支持情况</span><br><span class="line"></span><br><span class="line">MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；</span><br><span class="line">MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;</span><br><span class="line">只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。</span><br><span class="line">测试或使用全文索引时，要先看一下自己的 MySQL 版本、存储引擎和数据类型是否支持全文索引。</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p>拓展：测试索引</p></blockquote><p><strong>建表app_user：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;app_user&#96; (</span><br><span class="line">  &#96;id&#96; bigint(20) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(50) DEFAULT &#39;&#39; COMMENT &#39;用户昵称&#39;,</span><br><span class="line">  &#96;email&#96; varchar(50) NOT NULL COMMENT &#39;用户邮箱&#39;,</span><br><span class="line">  &#96;phone&#96; varchar(20) DEFAULT &#39;&#39; COMMENT &#39;手机号&#39;,</span><br><span class="line">  &#96;gender&#96; tinyint(4) unsigned DEFAULT &#39;0&#39; COMMENT &#39;性别（0:男；1：女）&#39;,</span><br><span class="line">  &#96;password&#96; varchar(100) NOT NULL COMMENT &#39;密码&#39;,</span><br><span class="line">  &#96;age&#96; tinyint(4) DEFAULT &#39;0&#39; COMMENT &#39;年龄&#39;,</span><br><span class="line">  &#96;create_time&#96; datetime DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  &#96;update_time&#96; timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;app用户表&#39;</span><br></pre></td></tr></table></figure><p><strong>批量插入数据：100w</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DROP FUNCTION IF EXISTS mock_data;</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE FUNCTION mock_data()</span><br><span class="line">RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE num INT DEFAULT 1000000;</span><br><span class="line">  DECLARE i INT DEFAULT 0;</span><br><span class="line">  WHILE i &lt; num DO</span><br><span class="line">   INSERT INTO app_user(&#96;name&#96;, &#96;email&#96;, &#96;phone&#96;, &#96;gender&#96;, &#96;password&#96;, &#96;age&#96;)</span><br><span class="line">    VALUES(CONCAT(&#39;用户&#39;, i), &#39;24736743@qq.com&#39;, CONCAT(&#39;18&#39;, FLOOR(RAND()*(999999999-100000000)+100000000)),FLOOR(RAND()*2),UUID(), FLOOR(RAND()*100));</span><br><span class="line">   SET i &#x3D; i + 1;</span><br><span class="line">  END WHILE;</span><br><span class="line">  RETURN i;</span><br><span class="line">END;</span><br><span class="line">SELECT mock_data();</span><br></pre></td></tr></table></figure><p><strong>索引效率测试</strong></p><p>无索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;; -- 查看耗时</span><br><span class="line">SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;;</span><br><span class="line">SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;;</span><br><span class="line"></span><br><span class="line">mysql&gt; EXPLAIN SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: app_user</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 992759</span><br><span class="line">     filtered: 10.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>创建索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_app_user_name ON app_user(name);</span><br></pre></td></tr></table></figure><p>测试普通索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: app_user</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ref</span><br><span class="line">possible_keys: idx_app_user_name</span><br><span class="line">          key: idx_app_user_name</span><br><span class="line">      key_len: 203</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;;</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;;</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM app_user WHERE name &#x3D; &#39;用户9999&#39;;</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>索引准则</p></blockquote><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表建议不要加索引</li><li>索引一般应加在查找条件的字段</li></ul><blockquote><p>索引的数据结构</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 我们可以在创建上述索引的时候，为其指定索引类型，分两类</span><br><span class="line">hash类型的索引：查询单条快，范围查询慢</span><br><span class="line">btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</span><br><span class="line"></span><br><span class="line">-- 不同的存储引擎支持的索引类型也不一样</span><br><span class="line">InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</span><br><span class="line">NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</span><br><span class="line">Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</span><br></pre></td></tr></table></figure><h2 id="权限设计数据库"><a href="#权限设计数据库" class="headerlink" title="权限设计数据库"></a>权限设计数据库</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a><strong>用户管理</strong></h3><blockquote><p>使用SQLyog 创建用户，并授予权限演示</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/r29yrT.png" alt></p><blockquote><p>基本命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 用户和权限管理 *&#x2F; ------------------</span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line">FLUSH PRIVILEGES</span><br><span class="line"></span><br><span class="line">-- 增加用户  CREATE USER kuangshen IDENTIFIED BY &#39;123456&#39;</span><br><span class="line">CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)</span><br><span class="line">    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。</span><br><span class="line">    - 只能创建用户，不能赋予权限。</span><br><span class="line">    - 用户名，注意引号：如 &#39;user_name&#39;@&#39;192.168.1.1&#39;</span><br><span class="line">    - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line"></span><br><span class="line">-- 重命名用户  RENAME USER kuangshen TO kuangshen2</span><br><span class="line">RENAME USER old_user TO new_user</span><br><span class="line"></span><br><span class="line">-- 设置密码</span><br><span class="line">SET PASSWORD &#x3D; PASSWORD(&#39;密码&#39;)    -- 为当前用户设置密码</span><br><span class="line">SET PASSWORD FOR 用户名 &#x3D; PASSWORD(&#39;密码&#39;)    -- 为指定用户设置密码</span><br><span class="line"></span><br><span class="line">-- 删除用户  DROP USER kuangshen2</span><br><span class="line">DROP USER 用户名</span><br><span class="line"></span><br><span class="line">-- 分配权限&#x2F;添加用户</span><br><span class="line">GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &#39;password&#39;]</span><br><span class="line">    - all privileges 表示所有权限</span><br><span class="line">    - *.* 表示所有库的所有表</span><br><span class="line">    - 库名.表名 表示某库下面的某表</span><br><span class="line"></span><br><span class="line">-- 查看权限   SHOW GRANTS FOR root@localhost;</span><br><span class="line">SHOW GRANTS FOR 用户名</span><br><span class="line">    -- 查看当前用户权限</span><br><span class="line">    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();</span><br><span class="line"></span><br><span class="line">-- 撤消权限</span><br><span class="line">REVOKE 权限列表 ON 表名 FROM 用户名</span><br><span class="line">REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名    -- 撤销所有权限</span><br></pre></td></tr></table></figure><blockquote><p>权限解释</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">-- 权限列表</span><br><span class="line">ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限</span><br><span class="line">ALTER    -- 允许使用ALTER TABLE</span><br><span class="line">ALTER ROUTINE    -- 更改或取消已存储的子程序</span><br><span class="line">CREATE    -- 允许使用CREATE TABLE</span><br><span class="line">CREATE ROUTINE    -- 创建已存储的子程序</span><br><span class="line">CREATE TEMPORARY TABLES        -- 允许使用CREATE TEMPORARY TABLE</span><br><span class="line">CREATE USER        -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span><br><span class="line">CREATE VIEW        -- 允许使用CREATE VIEW</span><br><span class="line">DELETE    -- 允许使用DELETE</span><br><span class="line">DROP    -- 允许使用DROP TABLE</span><br><span class="line">EXECUTE        -- 允许用户运行已存储的子程序</span><br><span class="line">FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span><br><span class="line">INDEX     -- 允许使用CREATE INDEX和DROP INDEX</span><br><span class="line">INSERT    -- 允许使用INSERT</span><br><span class="line">LOCK TABLES        -- 允许对您拥有SELECT权限的表使用LOCK TABLES</span><br><span class="line">PROCESS     -- 允许使用SHOW FULL PROCESSLIST</span><br><span class="line">REFERENCES    -- 未被实施</span><br><span class="line">RELOAD    -- 允许使用FLUSH</span><br><span class="line">REPLICATION CLIENT    -- 允许用户询问从属服务器或主服务器的地址</span><br><span class="line">REPLICATION SLAVE    -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span><br><span class="line">SELECT    -- 允许使用SELECT</span><br><span class="line">SHOW DATABASES    -- 显示所有数据库</span><br><span class="line">SHOW VIEW    -- 允许使用SHOW CREATE VIEW</span><br><span class="line">SHUTDOWN    -- 允许使用mysqladmin shutdown</span><br><span class="line">SUPER    -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span><br><span class="line">UPDATE    -- 允许使用UPDATE</span><br><span class="line">USAGE    -- “无权限”的同义词</span><br><span class="line">GRANT OPTION    -- 允许授予权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* 表维护 *&#x2F;</span><br><span class="line"></span><br><span class="line">-- 分析和存储表的关键字分布</span><br><span class="line">ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...</span><br><span class="line">-- 检查一个或多个表是否有错误</span><br><span class="line">CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option &#x3D; &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;</span><br><span class="line">-- 整理数据文件的碎片</span><br><span class="line">OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure><h3 id="MySQL备份mysql"><a href="#MySQL备份mysql" class="headerlink" title="MySQL备份mysql"></a>MySQL备份mysql</h3><p>数据库备份必要性</p><ul><li>保证重要数据不丢失</li><li>数据转移</li></ul><p>MySQL数据库备份方法</p><ul><li>mysqldump备份工具</li><li>数据库管理工具,如SQLyog</li><li>直接拷贝数据库文件和相关配置文件</li></ul><p><strong>mysqldump客户端</strong></p><p>作用 :</p><ul><li>转储数据库</li><li>搜集数据库进行备份</li><li>将数据转移到另一个SQL服务器,不一定是MySQL服务器</li></ul><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/r296qU.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 导出</span><br><span class="line">1. 导出一张表 -- mysqldump -uroot -p123456 school student &gt;D:&#x2F;a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:&#x2F;a.sql)</span><br><span class="line">2. 导出多张表 -- mysqldump -uroot -p123456 school student result &gt;D:&#x2F;a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:&#x2F;a.sql)</span><br><span class="line">3. 导出所有表 -- mysqldump -uroot -p123456 school &gt;D:&#x2F;a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:&#x2F;a.sql)</span><br><span class="line">4. 导出一个库 -- mysqldump -uroot -p123456 -B school &gt;D:&#x2F;a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 -B 库名 &gt; 文件名(D:&#x2F;a.sql)</span><br><span class="line"></span><br><span class="line">可以-w携带备份条件</span><br><span class="line"></span><br><span class="line">-- 导入</span><br><span class="line">1. 在登录mysql的情况下：-- source D:&#x2F;a.sql</span><br><span class="line">　　source  备份文件</span><br><span class="line">2. 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure><h2 id="规范化数据库设计"><a href="#规范化数据库设计" class="headerlink" title="规范化数据库设计"></a>规范化数据库设计</h2><p><strong>为什么需要数据库设计？？？当数据库比较复杂时我们需要设计数据库</strong></p><p><strong>糟糕的数据库设计 :</strong> </p><ul><li>数据冗余,存储空间浪费</li><li>数据更新和插入的异常</li><li>程序性能差</li></ul><p><strong>良好的数据库设计 :</strong> </p><ul><li><p>节省数据的存储空间</p></li><li><p>能够保证数据的完整性</p></li><li><p>方便进行数据库应用系统的开发</p><p><strong>软件项目开发周期中数据库设计 :</strong></p></li><li><p>需求分析阶段: 分析客户的业务和数据处理需求</p></li><li><p>概要设计阶段:设计数据库的E-R模型图 , 确认需求信息的正确和完整.</p></li></ul><p><strong>设计数据库步骤</strong></p><ul><li><p>收集信息</p></li><li><ul><li>与该系统有关人员进行交流 , 座谈 , 充分了解用户需求 , 理解数据库需要完成的任务.</li></ul></li><li><p>标识实体[Entity]</p></li><li></li><li><ul><li>标识数据库要管理的关键对象或实体,实体一般是名词</li></ul></li><li><p>标识每个实体需要存储的详细信息[Attribute]</p></li><li><p>标识实体之间的关系[Relationship]</p></li></ul><h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h3><p><strong>问题 : 为什么需要数据规范化?</strong></p><p>不合规范的表设计会导致的问题：</p><ul><li><p>信息重复</p></li><li><p>更新异常</p></li><li><p>插入异常</p></li><li><ul><li>无法正确表示信息</li></ul></li><li><p>删除异常</p></li><li><ul><li>丢失有效信息</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><p><strong>第一范式 (1st NF)</strong></p><p>第一范式的目标是确保每列的原子性,如果每列都是不可再分的最小数据单元,则满足第一范式</p><p><strong>第二范式(2nd NF)</strong></p><p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</p><p>第二范式要求每个表只描述一件事情</p><p><strong>第三范式(3rd NF)</strong></p><p>如果一个关系满足第二范式,并且除了主键以外的其他列都不传递依赖于主键列,则满足第三范式.</p><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p><p><strong>规范化和性能的关系</strong></p><p>为满足某种商业目标 , 数据库性能比规范化数据库更重要</p><p>在数据规范化的同时 , 要综合考虑数据库的性能</p><p>通过在给定的表中添加额外的字段,以大量减少需要从中搜索信息所需的时间</p><p>通过在给定的表中插入计算列,以方便查询</p><h2 id="EXPLAIN-执行计划"><a href="#EXPLAIN-执行计划" class="headerlink" title="EXPLAIN 执行计划"></a>EXPLAIN 执行计划</h2><blockquote><p>​    <strong>explain参数集合</strong> <a href="https://cloud.tencent.com/developer/article/1093229" target="_blank" rel="noopener">参考链接</a></p></blockquote><table><thead><tr><th>id</th><th>select type</th><th>table</th><th>partitions</th><th>type</th><th>possibale_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>extra</th></tr></thead><tbody><tr><td>序号</td><td>语句类型</td><td>表名</td><td></td><td>system</td><td>可能用到的索引</td><td>使用到的索引</td><td>键长度</td><td>使用到的列</td><td>检查了多少行</td><td></td><td>Distinct</td></tr><tr><td></td><td>simple</td><td></td><td></td><td>const</td><td></td><td></td><td></td><td></td><td></td><td></td><td>Not exists</td></tr><tr><td></td><td>primary</td><td></td><td></td><td>eq_ref</td><td></td><td></td><td></td><td></td><td></td><td></td><td>Range checked for each</td></tr><tr><td></td><td>union</td><td></td><td></td><td>ref</td><td></td><td></td><td></td><td></td><td></td><td></td><td>Using filesort</td></tr><tr><td></td><td>dependent union</td><td></td><td></td><td>ref_or_null</td><td></td><td></td><td></td><td></td><td></td><td></td><td>Using index</td></tr><tr><td></td><td>union result</td><td></td><td></td><td>index_merge</td><td></td><td></td><td></td><td></td><td></td><td></td><td>Using temporary</td></tr><tr><td></td><td>subquery</td><td></td><td></td><td>unique_subquery</td><td></td><td></td><td></td><td></td><td></td><td></td><td>Using where</td></tr><tr><td></td><td>dependent subquery</td><td></td><td></td><td>index_subquery</td><td></td><td></td><td></td><td></td><td></td><td></td><td>Using index&amp;Using where</td></tr><tr><td></td><td>derived</td><td></td><td></td><td>range</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>index</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>all</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus</title>
      <link href="/2020/10/19/mybatis-plus/"/>
      <url>/2020/10/19/mybatis-plus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="mybatis-plus使用"><a href="#mybatis-plus使用" class="headerlink" title="mybatis-plus使用"></a>mybatis-plus使用</h1><h4 id="主键不能使用varchar"><a href="#主键不能使用varchar" class="headerlink" title="(主键不能使用varchar)"></a>(<strong>主键不能使用varchar</strong>)</h4><h2 id="一、导入相关依赖"><a href="#一、导入相关依赖" class="headerlink" title="一、导入相关依赖"></a>一、导入相关依赖</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus 是自己开发的，非官方的！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">lombok</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、编写实体类-（User-java）"><a href="#二、编写实体类-（User-java）" class="headerlink" title="二、编写实体类 （User.java）"></a>二、编写实体类 （User.java）</h2><h4 id="实体类的set、get方法以及tostring等-可添加lambok插件中的-Data注解来简化代码"><a href="#实体类的set、get方法以及tostring等-可添加lambok插件中的-Data注解来简化代码" class="headerlink" title="实体类的set、get方法以及tostring等  可添加lambok插件中的@Data注解来简化代码"></a>实体类的set、get方法以及tostring等  可添加lambok插件中的@Data注解来简化代码</h4><h2 id="三、编写Mapper类（UserMapper-java）"><a href="#三、编写Mapper类（UserMapper-java）" class="headerlink" title="三、编写Mapper类（UserMapper.java）"></a>三、编写Mapper类（UserMapper.java）</h2><h4 id="在对应的Mapper上继承基本的类baseMapper"><a href="#在对应的Mapper上继承基本的类baseMapper" class="headerlink" title="在对应的Mapper上继承基本的类baseMapper"></a>在对应的Mapper上继承基本的类baseMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//所有的CRUD已经编写完成</span></span><br><span class="line"><span class="comment">//不需要像以前的配置一些xml</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、在启动器上添加扫描mapper包的注解（或者在启动类添加-mapperscan注解）"><a href="#四、在启动器上添加扫描mapper包的注解（或者在启动类添加-mapperscan注解）" class="headerlink" title="四、在启动器上添加扫描mapper包的注解（或者在启动类添加@mapperscan注解）"></a>四、在启动器上添加扫描mapper包的注解（或者在启动类添加@mapperscan注解）</h2><h2 id="五、可在使用test在控制台输出-或者创建controller来相应操作"><a href="#五、可在使用test在控制台输出-或者创建controller来相应操作" class="headerlink" title="五、可在使用test在控制台输出  或者创建controller来相应操作"></a>五、可在使用test在控制台输出  或者创建controller来相应操作</h2><h3 id="test类"><a href="#test类" class="headerlink" title="test类"></a>test类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SampleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   System.out.println((<span class="string">"----- selectAll method test ------"</span>));</span><br><span class="line">    <span class="comment">//参数是一个Wrapper，条件结构器，这里先不用 填null</span></span><br><span class="line">    <span class="comment">//查询所有的用户 </span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    Assert.assertEquals(<span class="number">5</span>, userList.size());</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制台输出："><a href="#控制台输出：" class="headerlink" title="控制台输出："></a>控制台输出：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=Jone, age=<span class="number">18</span>, email=test1<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">2</span>, name=Jack, age=<span class="number">20</span>, email=test2<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">3</span>, name=Tom, age=<span class="number">28</span>, email=test3<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">4</span>, name=Sandy, age=<span class="number">21</span>, email=test4<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">5</span>, name=Billie, age=<span class="number">24</span>, email=test5<span class="meta">@baomidou</span>.com)</span><br></pre></td></tr></table></figure><h3 id="controller类"><a href="#controller类" class="headerlink" title="controller类"></a>controller类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/selectall"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectall</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问web-url"><a href="#访问web-url" class="headerlink" title="访问web url"></a>访问web url</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8080/user/selectall</span></span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h4 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdouImpl</span><br></pre></td></tr></table></figure><h2 id="CRUD-拓展"><a href="#CRUD-拓展" class="headerlink" title="CRUD 拓展"></a>CRUD 拓展</h2><h4 id="Insert-插入"><a href="#Insert-插入" class="headerlink" title="Insert 插入"></a>Insert 插入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 插入一条记录</span><br><span class="line">int insert(T entity)</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>​    类型     T</p><p>​    参数名     entity</p><p>​    描述     实体对象</p><h4 id="举例测试"><a href="#举例测试" class="headerlink" title="举例测试"></a>举例测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println((<span class="string">"----- selectAll method test ------"</span>));</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName=(<span class="string">"shuishui"</span>);</span><br><span class="line">    user.setAge(<span class="number">3</span>);</span><br><span class="line">    user.setEmail(<span class="string">"12434141@qq.com"</span>);</span><br><span class="line">    </span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动生成-pojo-mapper类-mapper接口-mapper-xml文件"><a href="#自动生成-pojo-mapper类-mapper接口-mapper-xml文件" class="headerlink" title="自动生成  pojo - mapper类 - mapper接口 - mapper.xml文件"></a>自动生成  pojo - mapper类 - mapper接口 - mapper.xml文件</h2><h3 id="代码显示"><a href="#代码显示" class="headerlink" title="代码显示"></a>代码显示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heidou.irrigated;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.querys.SqlServerQuery;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"><span class="keyword">import</span> com.heidou.irrigated.utils.NetworkUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Scanner scanner;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 代码生成器</span></span><br><span class="line">AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局配置</span></span><br><span class="line">GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line"><span class="keyword">boolean</span> isIdea = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">/*if(projectPath.contains("water-resources-business"))&#123;</span></span><br><span class="line"><span class="comment">isIdea = false;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">if</span>(isIdea)&#123;</span><br><span class="line">projectPath = projectPath +<span class="string">"/water-resources-water-plan-api"</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//设置项目包名及配置环境</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// String projectPath = System.getProperty("user.dir") +"/water-resources-business";</span></span><br><span class="line">gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">gc.setAuthor(System.getProperty(<span class="string">"user.name"</span>) + <span class="string">"，IP："</span> + StringUtils.join(NetworkUtil.getLocalIpAddr(), <span class="string">"、"</span>));<span class="comment">// 设置作者，主机名_ip</span></span><br><span class="line"></span><br><span class="line">gc.setBaseResultMap(<span class="keyword">true</span>); <span class="comment">// 生成baseresultmap</span></span><br><span class="line">gc.setBaseColumnList(<span class="keyword">true</span>);<span class="comment">// 生成basecolumnlist</span></span><br><span class="line">gc.setServiceName(<span class="string">"%sService"</span>);<span class="comment">// service 命名方式 默认值：null 例如：%sBusiness 生成 UserBusiness， 设置成%s能去掉生成文件名称的前面I字母</span></span><br><span class="line">gc.setDateType(DateType.ONLY_DATE);<span class="comment">// 时间类型对应策略,默认值：TIME_PACK-java.time.LocalDateTime</span></span><br><span class="line">gc.setFileOverride(<span class="keyword">true</span>);<span class="comment">// 是否覆盖已有文件,默认：false</span></span><br><span class="line">gc.setOpen(<span class="keyword">false</span>);<span class="comment">// 是否打开输出目录,默认：true</span></span><br><span class="line">mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据源配置</span></span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="keyword">try</span> (FileInputStream in = <span class="keyword">new</span> FileInputStream((isIdea ? <span class="string">"water-resources-pack/"</span> : <span class="string">""</span> )+ <span class="string">"src/main/resources/application-dev.properties"</span>);) &#123;</span><br><span class="line">pro.load(in);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">dsc.setUrl(pro.getProperty(<span class="string">"spring.datasource.url"</span>));</span><br><span class="line">dsc.setDriverName(pro.getProperty(<span class="string">"spring.datasource.driver-class-name"</span>));</span><br><span class="line">dsc.setUsername(pro.getProperty(<span class="string">"spring.datasource.username"</span>));</span><br><span class="line">dsc.setPassword(pro.getProperty(<span class="string">"spring.datasource.password"</span>));</span><br><span class="line">mpg.setDataSource(dsc);</span><br><span class="line">dsc.setDbQuery(<span class="keyword">new</span> SqlServerQuery() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">tableFieldsSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"SELECT  b.PRECISION as PRECISION, b.scale as SCALE, (b.MAX_LENGTH/2) AS MAXLENGTH, B.is_nullable AS IS_NULLABLE, cast(a.NAME AS VARCHAR(500)) AS TABLE_NAME,cast(b.NAME AS VARCHAR(500)) AS COLUMN_NAME, "</span></span><br><span class="line">+ <span class="string">"cast(c.VALUE AS VARCHAR(500)) AS COMMENTS,cast(sys.types.NAME AS VARCHAR (500)) AS DATA_TYPE,"</span></span><br><span class="line">+ <span class="string">"("</span> + <span class="string">" SELECT CASE count(1) WHEN 1 then 'PRI' ELSE '' END"</span></span><br><span class="line">+ <span class="string">" FROM syscolumns,sysobjects,sysindexes,sysindexkeys,systypes "</span></span><br><span class="line">+ <span class="string">" WHERE syscolumns.xusertype = systypes.xusertype AND syscolumns.id = object_id (A.NAME) AND sysobjects.xtype = 'PK'"</span></span><br><span class="line">+ <span class="string">" AND sysobjects.parent_obj = syscolumns.id "</span> + <span class="string">" AND sysindexes.id = syscolumns.id "</span></span><br><span class="line">+ <span class="string">" AND sysobjects.NAME = sysindexes.NAME AND sysindexkeys.id = syscolumns.id "</span></span><br><span class="line">+ <span class="string">" AND sysindexkeys.indid = sysindexes.indid "</span></span><br><span class="line">+ <span class="string">" AND syscolumns.colid = sysindexkeys.colid AND syscolumns.NAME = B.NAME) as 'KEY',"</span></span><br><span class="line">+ <span class="string">"  b.is_identity isIdentity "</span></span><br><span class="line">+ <span class="string">" FROM ( select name,object_id from sys.tables UNION all select name,object_id from sys.views ) a "</span></span><br><span class="line">+ <span class="string">" INNER JOIN sys.COLUMNS b ON b.object_id = a.object_id "</span></span><br><span class="line">+ <span class="string">" LEFT JOIN sys.types ON b.user_type_id = sys.types.user_type_id   "</span></span><br><span class="line">+ <span class="string">" LEFT JOIN sys.extended_properties c ON c.major_id = b.object_id AND c.minor_id = b.column_id "</span></span><br><span class="line">+ <span class="string">" WHERE a.NAME = '%s' and sys.types.NAME !='sysname' "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重写父类预留查询自定义字段&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 这里查询的 SQL 对应父类 tableFieldsSql 的查询字段，默认不能满足你的需求请重写它&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 模板中调用：  table.fields 获取所有字段信息，</span></span><br><span class="line"><span class="comment"> * 然后循环字段获取 field.customMap 从 MAP 中获取注入字段如下  NULL 或者 PRIVILEGES</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] fieldCustom() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"MAXLENGTH"</span>, <span class="string">"IS_NULLABLE"</span>, <span class="string">"PRECISION"</span>, <span class="string">"SCALE"</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包配置</span></span><br><span class="line">PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line"><span class="comment">// String modeName = scanner("模块名，如果不分模块直接输入null");</span></span><br><span class="line"><span class="comment">// if(!Objects.equals(modeName, "null")) &#123;</span></span><br><span class="line"><span class="comment">// pc.setModuleName(modeName);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">String scannerStr = scanner(<span class="string">"表名，多个英文逗号分割"</span>);</span><br><span class="line">String subPkgName = <span class="string">"."</span> + <span class="string">"info"</span>;<span class="comment">//+ scannerStr.substring(0, 5).toLowerCase();//要设置的包名</span></span><br><span class="line">pc.setParent(<span class="string">"com.heidou.irrigated"</span>);<span class="comment">// 父包名。如果为空，将下面子包名必须写全部， 否则就只需写子包名</span></span><br><span class="line">pc.setEntity(<span class="string">"pojo"</span> + subPkgName);<span class="comment">// Entity包名</span></span><br><span class="line">pc.setController(<span class="string">"service"</span> + subPkgName);</span><br><span class="line">pc.setServiceImpl(<span class="string">"service"</span> + subPkgName);<span class="comment">// 设置Service Impl包名，不想要生成serviceimpl就设置成这个包名</span></span><br><span class="line">pc.setService(<span class="string">"service"</span> + subPkgName);</span><br><span class="line">pc.setMapper(<span class="string">"mapper"</span> + subPkgName);</span><br><span class="line"></span><br><span class="line">mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义配置</span></span><br><span class="line">InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 自定义属性注入:abc</span></span><br><span class="line"><span class="comment">// 在.ftl(或者是.vm)模板中，通过$&#123;cfg.abc&#125;获取属性</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">this</span>.setMap(map);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">String templatePath = <span class="string">"/templates/mapper.xml.ftl"</span>;</span><br><span class="line"><span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line"><span class="comment">// String templatePath = "/templates/mapper.xml.vm";</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义输出配置</span></span><br><span class="line">List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">String finalProjectPath = projectPath;</span><br><span class="line">focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">tableInfo.setControllerName(<span class="keyword">null</span>);<span class="comment">// 设置不生成controller</span></span><br><span class="line">tableInfo.setServiceImplName(<span class="keyword">null</span>);<span class="comment">// 设置不生成serviceimpl</span></span><br><span class="line"><span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line"><span class="keyword">return</span> finalProjectPath + <span class="string">"/src/main/resources/mapper/"</span> <span class="comment">// + pc.getModuleName() + "/"</span></span><br><span class="line">+ tableInfo.getEntityName() + <span class="string">"Mapper.xml"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">cfg.setFileOutConfigList(focList);</span><br><span class="line">mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置模板</span></span><br><span class="line">TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line"><span class="comment">// 配置自定义输出模板</span></span><br><span class="line"><span class="comment">// 指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line"><span class="comment">// templateConfig.setEntity("templates/entity2.java");</span></span><br><span class="line"><span class="comment">// templateConfig.setService();</span></span><br><span class="line"><span class="comment">// templateConfig.setController();</span></span><br><span class="line">templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略配置</span></span><br><span class="line">StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line"><span class="comment">// strategy.setSuperEntityClass("com.baomidou.ant.common.BaseEntity");</span></span><br><span class="line">strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// strategy.setSuperControllerClass("com.baomidou.ant.common.BaseController");</span></span><br><span class="line">strategy.setInclude(scannerStr.split(<span class="string">","</span>));</span><br><span class="line"><span class="comment">// strategy.setSuperEntityColumns("id");// 自定义基础的Entity类，公共字段</span></span><br><span class="line">strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);<span class="comment">// 驼峰转连字符</span></span><br><span class="line">strategy.setEntityTableFieldAnnotationEnable(<span class="keyword">true</span>);<span class="comment">// 是否生成实体时，生成字段注解</span></span><br><span class="line"><span class="comment">// strategy.setTablePrefix(pc.getModuleName() + "_");</span></span><br><span class="line"><span class="comment">//strategy.setSuperServiceClass("com.heidou.irrigated.service.BaseServiceImpl");</span></span><br><span class="line">strategy.setSuperServiceImplClass(<span class="string">"com.heidou.irrigated.service.BaseServiceImpl"</span>);</span><br><span class="line">strategy.setRestControllerStyle(<span class="keyword">false</span>);<span class="comment">// 生成 @RestController 控制器</span></span><br><span class="line">mpg.setStrategy(strategy);</span><br><span class="line">mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">mpg.execute();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 读取控制台内容</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">help.append(<span class="string">"请输入"</span> + tip + <span class="string">"："</span>);</span><br><span class="line">System.out.println(help.toString());</span><br><span class="line"><span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">String ipt = scanner.next();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line"><span class="keyword">return</span> ipt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">"请输入正确的"</span> + tip + <span class="string">"！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mybatis-plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目知识</title>
      <link href="/2020/10/14/web%E7%88%B1%E5%8F%8A%E6%89%80%E7%88%B1/"/>
      <url>/2020/10/14/web%E7%88%B1%E5%8F%8A%E6%89%80%E7%88%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="项目知识点（springboot-thmeleaf）"><a href="#项目知识点（springboot-thmeleaf）" class="headerlink" title="项目知识点（springboot+thmeleaf）"></a>项目知识点（springboot+thmeleaf）</h1><hr><h3 id="调用导出Excel表格接口"><a href="#调用导出Excel表格接口" class="headerlink" title="调用导出Excel表格接口"></a>调用导出Excel表格接口</h3><p>前端：（注释的能成功调用，可是未能下载出来，根据网上解释，应该是 <strong>ajax</strong> 的安全性问题导致无法下载）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">ep</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.location.href=<span class="string">'/user/exportAll'</span>;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"成功"</span>)</span></span><br><span class="line">        /*$.ajax(&#123;</span><br><span class="line"><span class="actionscript">            url:<span class="string">"/user/exportAll"</span>, type: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"成功"</span>)</span></span><br><span class="line"><span class="javascript">                /!*<span class="built_in">window</span>.location.reload();*!<span class="regexp">/</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)*/</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"exportAll"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"导出"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportDetail</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userService.queryPage();</span><br><span class="line">        String templateFilePath = <span class="string">"/excel/用户名单模板.xlsx"</span>;</span><br><span class="line">        String fileName = <span class="string">"用户名单.xlsx"</span>;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"data"</span>, list);</span><br><span class="line">        ExcelUtils.export(templateFilePath, fileName, map, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="实现分页效果"><a href="#实现分页效果" class="headerlink" title="实现分页效果"></a>实现分页效果</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>username<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>password<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"width: 2.5em;"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment">&lt;!-- 遍历list内容--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页文字信息 ：拿到控制器处理请求时封装在pageInfo里面的分页信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-5"</span> <span class="attr">id</span>=<span class="string">"page_info_area"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dataTables_info"</span> <span class="attr">id</span>=<span class="string">"dataTableExample_info"</span> <span class="attr">style</span>=<span class="string">"margin-left: 20px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-7"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dataTables_paginate paging_simple_numbers"</span> <span class="attr">id</span>=<span class="string">"dataTableExample_paginate"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">"line-height: 32.4px"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--1.pageContext.request.contextPath表示当前项目路径，采用的是绝对路径表达方式。一般为http:localhost:8080/项目名 。</span></span><br><span class="line"><span class="comment">            2.首页，末页的逻辑：pn=1访问第一次，pn=$&#123;pageInfo.pages&#125;访问最后一页  --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果还有前页就访问当前页码-1的页面， --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--遍历所有导航页码，如果遍历的页码页当前页码相等就高亮显示，如果相等就普通显示  --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果还有后页就访问当前页码+1的页面， --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    toSomePage(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//每次调用此函数都发送一次请求，变量pn是默认开始页面</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toSomePage</span>(<span class="params">pn</span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"/user/queryPage"</span>, <span class="attr">type</span>: <span class="string">"post"</span>,</span><br><span class="line">        data: <span class="string">"pn="</span> + pn,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">            build_user_table(result);<span class="comment">//构建用户表格</span></span><br><span class="line">            build_pagination_info(result);<span class="comment">//构建分页信息</span></span><br><span class="line">            build_pagination_nav(result);<span class="comment">//构建分页导航</span></span><br><span class="line">            xh()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_user_table</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//先清空表格，不然会直接回追加到上次查询结果上</span></span><br><span class="line">    $(<span class="string">"con"</span>).empty();</span><br><span class="line">    <span class="comment">//获取服务器返回的json数据</span></span><br><span class="line">    <span class="keyword">var</span> users = result.info.pageInfo.list;</span><br><span class="line">    con = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//$.each()是jquery的遍历方法</span></span><br><span class="line">    $.each(users, <span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// var date = new Date(parseInt(item.eta));</span></span><br><span class="line">        <span class="comment">// date.format("yyyy-MM-dd");</span></span><br><span class="line">        <span class="comment">// var ww= HdUtil.Date.prototype.format(item.eta);</span></span><br><span class="line">        array.push(item.id);</span><br><span class="line">        uid = array[index];</span><br><span class="line">        con += <span class="string">"&lt;tr&gt;&lt;td id='id' class='id'&gt;"</span> + item.id + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">        con += <span class="string">"&lt;td id='username'&gt;"</span> + item.username + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">        con += <span class="string">"&lt;td id='password'&gt;"</span> + item.password + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">        con += <span class="string">"&lt;td id='mail'&gt;"</span> + item.mail + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">        con += <span class="string">"&lt;td id='phone'&gt;"</span> + item.phone + <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">        <span class="comment">//con += "&lt;td&gt;" + item.gender + "&lt;/td&gt;";</span></span><br><span class="line">        con += <span class="string">"&lt;td&gt;"</span> + <span class="string">'&lt;a href="/user/adduser"&gt;&lt;i class="fa fa-pencil"&gt;&lt;/i&gt;&lt;/a&gt;\n'</span> +</span><br><span class="line">            <span class="string">'&lt;button type="button"  id="btn"   role="button" data-toggle="modal"&gt;&lt;i class="fa fa-trash-o"&gt;&lt;/i&gt;&lt;/button&gt;'</span> + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">        <span class="comment">/*alert(uid)</span></span><br><span class="line"><span class="comment">        &lt;a href="javascript:void(0)"  id="btn" onclick="de(uid)"  role="button" data-toggle="modal"&gt;&lt;i class="fa fa-trash-o"&gt;&lt;/i&gt;&lt;/a&gt;*/</span></span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#con"</span>).html(con);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 创建分页信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_pagination_info</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#dataTableExample_info"</span>).empty();</span><br><span class="line">    <span class="comment">//得到服务器返回的jason数据里的分页信息，然后拼接</span></span><br><span class="line">    <span class="keyword">var</span> pageNum = result.info.pageInfo.pageNum;</span><br><span class="line">    <span class="keyword">var</span> pageSize = result.info.pageInfo.pages;</span><br><span class="line">    <span class="keyword">var</span> total = result.info.pageInfo.total;</span><br><span class="line">    $(<span class="string">"#dataTableExample_info"</span>).append(<span class="string">"当前"</span> + pageNum + <span class="string">"页,共"</span> + pageSize + <span class="string">"页,总"</span> + total + <span class="string">"条记录"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 创建分页导航条：</span></span><br><span class="line"><span class="comment"> 根据bootstrap文档里的分页说明，使用jquery创建元素。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_pagination_nav</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#dataTableExample_paginate"</span>).empty();</span><br><span class="line">    <span class="comment">//首页</span></span><br><span class="line">    <span class="keyword">var</span> fristPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).attr(<span class="string">"href"</span>, <span class="string">"javacript:void(0);"</span>).append(<span class="string">"首页"</span>));</span><br><span class="line">    <span class="comment">//前一页</span></span><br><span class="line">    <span class="keyword">var</span> prePageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).attr(<span class="string">"href"</span>, <span class="string">"javacript:void(0);"</span>).append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).append(<span class="string">"&amp;laquo;"</span>)));</span><br><span class="line">    <span class="comment">//如果没有前一页，就让按钮不能被点击,否则绑定点击事件，重新发送ajax请求，访问相应页面</span></span><br><span class="line">    <span class="keyword">if</span> (result.info.pageInfo.hasPreviousPage == <span class="literal">false</span>) &#123;</span><br><span class="line">        fristPageLi.addClass(<span class="string">"disable"</span>);</span><br><span class="line">        prePageLi.addClass(<span class="string">"disable"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fristPageLi.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            toSomePage(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        prePageLi.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            toSomePage(result.info.pageInfo.pageNum - <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ul = $(<span class="string">"&lt;ul class=\"pagination\" style=\"float: right\"&gt;&lt;/ul&gt;"</span>).addClass(<span class="string">"pagination"</span>).append(fristPageLi).append(prePageLi);</span><br><span class="line">    $.each(result.info.pageInfo.navigatepageNums, <span class="function"><span class="keyword">function</span> (<span class="params">index, element</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> numLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).attr(<span class="string">"href"</span>, <span class="string">"javacript:void(0);"</span>).append(element));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果遍历的页码等于当前页面，就高亮显示，然后添加点击事件，如果有点击，就重新发送ajax请求，访问当前页面（pn=element）</span></span><br><span class="line">        <span class="keyword">if</span> (result.info.pageInfo.pageNum == element) &#123;</span><br><span class="line">            numLi.addClass(<span class="string">"active"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        numLi.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            toSomePage(element);</span><br><span class="line">        &#125;)</span><br><span class="line">        ul.append(numLi);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下一页</span></span><br><span class="line">    <span class="keyword">var</span> nextPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).attr(<span class="string">"href"</span>, <span class="string">"javacript:void(0);"</span>).append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).append(<span class="string">"&amp;raquo;"</span>)));</span><br><span class="line">    <span class="comment">//末页</span></span><br><span class="line">    <span class="keyword">var</span> lastPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).attr(<span class="string">"href"</span>, <span class="string">"javacript:void(0);"</span>).append(<span class="string">"末页"</span>));</span><br><span class="line">    <span class="comment">//如果没有后一页，就让按钮不能被点击,否则绑定点击事件，重新发送ajax请求，访问相应页面</span></span><br><span class="line">    <span class="keyword">if</span> (result.info.pageInfo.hasNextPage == <span class="literal">false</span>) &#123;</span><br><span class="line">        nextPageLi.addClass(<span class="string">"disable"</span>);</span><br><span class="line">        lastPageLi.addClass(<span class="string">"disable"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nextPageLi.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            toSomePage(result.info.pageInfo.pageNum + <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        lastPageLi.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            toSomePage(result.info.pageInfo.pages);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    ul.append(nextPageLi).append(lastPageLi);</span><br><span class="line">    $(<span class="string">"&lt;nav&gt;&lt;/nav&gt;"</span>).append(ul).appendTo(<span class="string">"#dataTableExample_paginate"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*根据ID删除</span></span><br><span class="line"><span class="comment">* 思路：</span></span><br><span class="line"><span class="comment">* 在上面遍历的时候将所有的 ID 存进Array里面</span></span><br><span class="line"><span class="comment">* 获取所有button</span></span><br><span class="line"><span class="comment">* 排除掉当前页面的其他button</span></span><br><span class="line"><span class="comment">* 遍历每个 button 绑定事件</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">var</span> id;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xh</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">        btns[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            id = array[i - <span class="number">2</span>];</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">"/user/delete"</span>, <span class="attr">type</span>: <span class="string">"post"</span>,</span><br><span class="line">                data: <span class="string">"id="</span> + id,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                    alert(result)</span><br><span class="line">                    <span class="built_in">window</span>.location.reload();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端：</p><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"分页查询"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"queryPage"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> JSONResultVo&lt;IPage&lt;User&gt;&gt; queryPage(<span class="meta">@RequestParam</span>(value=<span class="string">"pn"</span>,defaultValue=<span class="string">"1"</span>) Integer pn)&#123;</span><br><span class="line">       PageHelper.startPage(pn,<span class="number">5</span>);</span><br><span class="line">       List&lt;User&gt; list = userService.queryPage();</span><br><span class="line">       PageInfo page = <span class="keyword">new</span> PageInfo(list, <span class="number">5</span>);</span><br><span class="line">       Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">"pageInfo"</span>,page);</span><br><span class="line">       JSONResultVo&lt;Object&gt; jsonResultVo = <span class="keyword">new</span> JSONResultVo&lt;&gt;();</span><br><span class="line">       <span class="keyword">return</span> jsonResultVo.setData(map);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>service:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper.queryPage();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>mapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select a.* from user a where a.status !=1"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryPage</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/12/24/rgvQds.png" alt="image-20200918093118255"></p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"LoginFilter"</span>,urlPatterns = &#123;<span class="string">"/*"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String NO_LOGIN = <span class="string">"无权限请先登录"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        <span class="comment">//是否需要过滤</span></span><br><span class="line">        <span class="keyword">boolean</span> needFilter = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//不需要登录就可以访问的路径(比如:注册登录等)</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"/user/login"</span>,<span class="string">"/user/submit"</span>,<span class="string">"/"</span>));</span><br><span class="line">        <span class="keyword">if</span>(list.contains(uri))&#123;</span><br><span class="line">            needFilter = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!needFilter) &#123;</span><br><span class="line">            <span class="comment">//不需要过滤直接传给下一个过滤器</span></span><br><span class="line">            chain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// session中包含loginUser对象,则是登录状态</span></span><br><span class="line">            <span class="keyword">if</span>(session!=<span class="keyword">null</span>&amp;&amp;session.getAttribute(<span class="string">"username"</span>)!=<span class="keyword">null</span>&amp;&amp;session.getAttribute(<span class="string">"password"</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/user/login"</span>).forward(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录处理设置<strong>SessionActtribute</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"/登录"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">submitLogin</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        session.setAttribute(<span class="string">"username"</span>,username);</span><br><span class="line">        session.setAttribute(<span class="string">"password"</span>,password);</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"用户不存在"</span>.equals(userService.submitLogin(user)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2020/09/25/spring%20boot/"/>
      <url>/2020/09/25/spring%20boot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="SpringBoot-笔记"><a href="#SpringBoot-笔记" class="headerlink" title="SpringBoot 笔记"></a>SpringBoot 笔记</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>spring boot启动类</p><p>扫描dao层（mapper包）下的子类  操作数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableSwagger</span>2<span class="comment">//配置Swagger</span></span><br><span class="line"><span class="meta">@Slf</span>4j<span class="comment">//配置日志</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.demo.mapper"</span>)<span class="comment">//mapper扫描包</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">//springboot启动</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span>  <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"springboot启动完成！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controller包"><a href="#Controller包" class="headerlink" title="Controller包"></a>Controller包</h2><h3 id="需要配置的注解"><a href="#需要配置的注解" class="headerlink" title="需要配置的注解"></a>需要配置的注解</h3><p>==@RestController==<br>==@RequestMapping==</p><p>==@RestController==相当于两个注解    ==@ResponseBody== ＋ ==@Controller==<br>==@RequestMapping(“/springboot_demo2”)==  里面填写请求uri地址</p><p>调用service层的类 需要设置<strong>@Autowired</strong>注解进行自动注入</p><h2 id="entity（bean-实体层）"><a href="#entity（bean-实体层）" class="headerlink" title="entity（bean  实体层）"></a>entity（bean  实体层）</h2><h3 id="mapper（dao）包"><a href="#mapper（dao）包" class="headerlink" title="mapper（dao）包"></a>mapper（dao）包</h3><p>包下存放接口   与数据库操作【数据库访问层】</p><h3 id="repository"><a href="#repository" class="headerlink" title="@repository"></a>@repository</h3><p>需要在Spring中配置扫描包地址，然后生成dao层的bean，之后被注入到<em>ServiceImpl</em>中</p><p>假如用注解来操作数据库   需要添加一个<em>@Mapper*注解  用来表示<br>（使用</em>@mapper*后，不需要在spring配置中设置扫描地址即 注解@mapperscan，通过mapper.xml里面的namespace属性对应相关的mapper类，spring将动态的生成Bean后注入到ServiceImpl中。）</p><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><p>用来处理业务逻辑的，也就是需要调用dao层</p><p>service  包下存放 处理dao层得到的数据  进行加  整合  反馈给controller层    使用@service注解<br>如要调用dao层的接口 需要设置@Autowired注解  进行自动注入。</p><h2 id="部分注解的解释"><a href="#部分注解的解释" class="headerlink" title="部分注解的解释"></a>部分注解的解释</h2><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p>语义基础之上细化为<br><em>@Repository</em>（dao层 /mapper）<br><em>@Service</em>（service层）<br><em>@Controller</em>（controller层）<br>使用此类注解  可将所需要的类加载到spring容器中<br><a href="https://blog.csdn.net/kingmax54212008/article/details/104418568?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159704504419195264548546%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=159704504419195264548546&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-3-104418568.pc_ecpm_v3_pc_rank_v3&utm_term=%40autowired%E6%B3%A8%E8%A7%A3&spm=1018.2118.3001.4187" target="_blank" rel="noopener">详细解释地址</a>  </p><h3 id="PostMapping-“-abc”"><a href="#PostMapping-“-abc”" class="headerlink" title="@PostMapping(“/abc”)"></a>@PostMapping(“/abc”)</h3><p>等同于<br>@RequestMapping(value=”/abc” , method = “RequestMethod.POST”)<br>同理可得<br>@GetMapping、@DeleteMapping 和其他  RequestMapping**</p><h3 id="PathVariable-将URI中的占位符转化为参数"><a href="#PathVariable-将URI中的占位符转化为参数" class="headerlink" title="@PathVariable* 将URI中的占位符转化为参数"></a>@PathVariable<em>* 将URI中的占位符转化为参数</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"show5/&#123;id&#125;/&#123;name&#125;"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test5</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long ids ,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span> String names)</span>&#123;</span><br></pre></td></tr></table></figure><h3 id="Transactional-事务管理"><a href="#Transactional-事务管理" class="headerlink" title="@Transactional   事务管理"></a>@Transactional   事务管理</h3><p>注:<br>    只能应用到接口方法、类、还有public方法上。  </p><table><thead><tr><th>属性名</th><th align="center">说明</th></tr></thead><tbody><tr><td>name</td><td align="center">当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器。</td></tr><tr><td>propagation</td><td align="center">事务的传播行为，默认值为 REQUIRED。</td></tr><tr><td>isolation</td><td align="center">事务的隔离度，默认值采用 DEFAULT。</td></tr><tr><td>timeout</td><td align="center">事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</td></tr><tr><td>read-only</td><td align="center">指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。</td></tr><tr><td>rollback-for</td><td align="center">用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔。</td></tr><tr><td>no-rollback- for</td><td align="center">抛出 no-rollback-for 指定的异常类型，不回滚事务。</td></tr><tr><td>## 自定义注解类 ##</td><td align="center"></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="meta">@Documented</span>      <span class="comment">//注解信息会被添加到Java文档中</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)      <span class="comment">//注解的生命周期，表示注解会被保留到什么阶段，可以选择编译阶段、类加载阶段，或运行阶段</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD) <span class="comment">//注解作用的位置，ElementType.METHOD表示该注解仅能作用于方法上</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span>  XXX&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot全局配置文件"><a href="#Spring-Boot全局配置文件" class="headerlink" title="Spring Boot全局配置文件"></a>Spring Boot全局配置文件</h2><p>两种写法：application.properties或application.yml   官方推崇yml格式</p><h2 id="PO-BO-VO和POJO的区别和解释"><a href="#PO-BO-VO和POJO的区别和解释" class="headerlink" title="PO,BO,VO和POJO的区别和解释"></a>PO,BO,VO和POJO的区别和解释</h2><p><a href="https://blog.csdn.net/u011870547/article/details/81077153" target="_blank" rel="noopener">解释1</a><br><a href="https://www.wukong.com/answer/6535030067171442948/?iid=28069560333&app=news_article&share_ansid=6535030067171442948&wxshare_count=1&tt_from=weixin&utm_source=weixin&utm_medium=toutiao_android&utm_campaign=client_share" target="_blank" rel="noopener">解释2</a>  </p><h2 id="前后端交互数据转换-Json"><a href="#前后端交互数据转换-Json" class="headerlink" title="前后端交互数据转换 Json"></a>前后端交互数据转换 Json</h2><p>使用postman调用接口 传入json格式数据时，导入依赖转化为对象 （解决传入数据为null）</p><p>缺少json转换成对象的包，在pom文件中添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.fasterxml.jackson.core&lt;<span class="regexp">/groupId&gt;</span></span><br><span class="line"><span class="regexp">&lt;artifactId&gt;jackson-databind&lt;/</span>artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.9</span><span class="number">.8</span>&lt;<span class="regexp">/version&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="Test类测试"><a href="#Test类测试" class="headerlink" title="Test类测试"></a>Test类测试</h2><p>在spring boot项目下，要想在测试类下使用 jUnit 测试，需要在测试类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>(classes = DemoApplication<span class="class">.<span class="keyword">class</span>) //<span class="title">DemoApplication</span>.<span class="title">class</span> 是项目启动类</span></span><br><span class="line"><span class="class">@<span class="title">RunWith</span>(<span class="title">SpringJUnit4ClassRunner</span>.<span class="title">class</span>)//不加也没报错</span></span><br></pre></td></tr></table></figure><h2 id="spring-boot自动配置"><a href="#spring-boot自动配置" class="headerlink" title="spring boot自动配置"></a>spring boot自动配置</h2><p><a href="https://blog.csdn.net/u014745069/article/details/83820511?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight" target="_blank" rel="noopener">原理</a></p><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>引入依赖即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="整合分页"><a href="#整合分页" class="headerlink" title="整合分页"></a>整合分页</h2><p>引入依赖jar包：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>详细解释<a href="https://blog.csdn.net/baidu_30670015/article/details/84636533" target="_blank" rel="noopener">https://blog.csdn.net/baidu_30670015/article/details/84636533</a></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>var与let引发的血案</title>
      <link href="/2020/09/25/var%20%E5%92%8C%20let%20%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88%EF%BC%81%EF%BC%81/"/>
      <url>/2020/09/25/var%20%E5%92%8C%20let%20%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88%EF%BC%81%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="var-和-let-引发的血案！！"><a href="#var-和-let-引发的血案！！" class="headerlink" title="var 和 let 引发的血案！！"></a><strong>var 和 let 引发的血案！！</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xh</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">        btns[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            id = array[i - <span class="number">2</span>];</span><br><span class="line">            alert(id);</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">"/user/delete"</span>, <span class="attr">type</span>: <span class="string">"post"</span>,</span><br><span class="line">                data: <span class="string">"id="</span> + id,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                    alert(result)</span><br><span class="line">                    <span class="built_in">window</span>.location.reload();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>炒鸡简单的一个根据id删除按钮，在var和let上就耽误了我一天的时间！！！</p><p>最简单的识别方法  var是直接遍历到最后 所以aler(i) 一直是最后一个！！！  </p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合swagger</title>
      <link href="/2020/09/12/SwaggerConfig/"/>
      <url>/2020/09/12/SwaggerConfig/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Swagger-使用"><a href="#Swagger-使用" class="headerlink" title="Swagger 使用"></a>Swagger 使用</h1><h2 id="方法一：使用官方依赖"><a href="#方法一：使用官方依赖" class="headerlink" title="方法一：使用官方依赖"></a>方法一：使用官方依赖</h2><h3 id="Swagger相关依赖"><a href="#Swagger相关依赖" class="headerlink" title="Swagger相关依赖"></a>Swagger相关依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="SwaggerConfig-配置类"><a href="#SwaggerConfig-配置类" class="headerlink" title="SwaggerConfig 配置类"></a>SwaggerConfig 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createDefaultApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ParameterBuilder parameterBuilder = <span class="keyword">new</span> ParameterBuilder();</span><br><span class="line">        List&lt;Parameter&gt; parameters = <span class="keyword">new</span> ArrayList&lt;Parameter&gt;();</span><br><span class="line">        parameterBuilder.name(<span class="string">"token"</span>).description(<span class="string">"令牌"</span>).modelRef(<span class="keyword">new</span> ModelRef(<span class="string">"string"</span>)).parameterType(<span class="string">"header"</span>).required(<span class="keyword">false</span>).build();</span><br><span class="line">        parameters.add(parameterBuilder.build());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .globalOperationParameters(parameters);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                <span class="comment">//标题</span></span><br><span class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</span><br><span class="line">                <span class="comment">//简介</span></span><br><span class="line">                .description(<span class="string">""</span>)</span><br><span class="line">                <span class="comment">//服务条款</span></span><br><span class="line">                .termsOfServiceUrl(<span class="string">""</span>)</span><br><span class="line">                <span class="comment">//作者个人信息</span></span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"zxj"</span>, <span class="string">""</span>, <span class="string">"1157821253@qq.com"</span>))</span><br><span class="line">                <span class="comment">//版本</span></span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法二-第三方依赖-（最简操作，不推荐使用容易出现guava版本与之不匹配错误）"><a href="#方法二-第三方依赖-（最简操作，不推荐使用容易出现guava版本与之不匹配错误）" class="headerlink" title="方法二 :第三方依赖 （最简操作，不推荐使用容易出现guava版本与之不匹配错误）"></a>方法二 :第三方依赖 （最简操作，<font color="red">不推荐使用容易出现guava版本与之不匹配错误</font>）</h2><h3 id="1-添加第三方swagger依赖"><a href="#1-添加第三方swagger依赖" class="headerlink" title="1.添加第三方swagger依赖"></a>1.添加第三方swagger依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.spring4all&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.7.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>##2.在Spring Boot项目的启动类上添加@EnableSwagger2Doc注解，就可以直接使用啦。  </p><p><a href="https://github.com/SpringForAll/spring-boot-starter-swagger" target="_blank" rel="noopener">https://github.com/SpringForAll/spring-boot-starter-swagger</a>这是GitHub上这个swagger依赖实现的项目，里面有详细的讲解。</p><h2 id="Swagger-注释"><a href="#Swagger-注释" class="headerlink" title="Swagger 注释"></a>Swagger 注释</h2><p>|作用范围|API|使用位置|<br>|-|-|<br>|对象属性|@ApiModelProperty|用在出入参数对象的字段上|<br>|协议集描述|@Api|用于controller类上|<br>|协议描述|@ApiOperation|用在controller的方法上|<br>|Response集|@ApiResponses|用在controller的方法上|<br>|Response|@ApiResponse|用在 @ApiResponses里边|<br>|非对象参数集|@ApiImplicitParams|用在controller的方法上|<br>|非对象参数描述|@ApiImplicitParam|用在@ApiImplicitParams的方法里边|<br>|描述返回对象的意义|@ApiModel|用在返回对象类上|</p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Thymeleaf</title>
      <link href="/2020/09/12/Thymeleaf/"/>
      <url>/2020/09/12/Thymeleaf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h1><h2 id="1-Thymeleaf介绍"><a href="#1-Thymeleaf介绍" class="headerlink" title="1.Thymeleaf介绍"></a>1.Thymeleaf介绍</h2><ul><li><p>Thymeleaf 与JSP类似，最大的区别在于，JSP在运行之后才能得纯HTML，而 Thymeleaf 在运行之前也是纯html。Thymeleaf跟 Velocity、FreeMarker 等模板引擎大同小异 ，相较与其他的模板引擎，它有如下三个极吸引人的特点：</p></li><li><p>Thymeleaf 在有网络和无网络的环境下皆可运行。它可以让在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</p></li><li><p>Thymeleaf 开箱即用。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板改jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</p></li><li><p>Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"#&#123;hello.world&#125;"</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        这是一段标准的HTML代码，通过浏览器直接打开它是可以正确解析并且看到页面的静态效果，显示的内容是<code>&lt;/P&gt;</code>标签里的文本<code>Hello World!</code>。标签中的th:text属性用来填充该标签的内容，也就是说在上面的例子中<code>&lt;/P&gt;</code>标签中的<code>Hello World!</code>将会被th:text属性中<code>#{hello.world}</code>的值替换。假如<code>#{hello.world}</code>的值是<code>Hello Thymeleaf!</code>那么网页打开时显示的内容将会变成Hello Thymeleaf!。<br>​        在传统的JSP中，我们需要在<code>&lt;/P&gt;</code>标签中加入<code>${hello.world}</code>才能让浏览器显示数据，每次开发前端页面我们必须部署项目启动服务器之后才能显示数据，从而根据显示的数据进行美化或者修改前端的页面。使用Thymeleaf 模板引擎之后，不需要部署项目，只要在前端设置模板数据用于查看显示效果就可以了，在标签中加入th:text属性之后，项目部署时前端设置的模板数据就会被后端的数据（通常是数据库中的数据）替换，这样开发的时候就可以专注于前端或者专注于后端，大大提高我们的开发效率，如今的是趋势前后端开发分离，使用Thymeleaf 模板引擎能减少团队之间因前后端开发差异产生的问题。</p><h2 id="2-Thymeleaf的标准表达式语法"><a href="#2-Thymeleaf的标准表达式语法" class="headerlink" title="2. Thymeleaf的标准表达式语法"></a>2. Thymeleaf的标准表达式语法</h2><p>Thymeleaf有四种标准表达式语法</p><ol><li>变量表达式</li><li>URL表达式</li><li>选择(星号)表达式</li><li>文字国际化表达式</li></ol><h3 id="2-1变量表达式"><a href="#2-1变量表达式" class="headerlink" title="2.1变量表达式"></a>2.1变量表达式</h3><p>变量表达式即OGNL表达式或Spring EL表达式(在Spring术语中也叫model attributes)。像这种：<code>${user.name}</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>UserName is :  <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>xiaoming<span class="tag">&lt;/<span class="name">span</span>&gt;</span> !<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认运行结果是：UserName is : xiaoming ! 如果<code>${[user.name]}</code>的值是xiaohong则输出<code>UserName is : xiaohong !</code><br>这种与JSP的方式一样</p><h3 id="2-2URL表达式"><a href="#2-2URL表达式" class="headerlink" title="2.2URL表达式"></a>2.2URL表达式</h3><p>Thymeleaf对于URL的处理是通过语法@{…}来处理，举个简单的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.baidu.com&#125;"</span>&gt;</span>Thymeleaf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Thymeleaf支持绝对路径URL也支持相对路径的URL:<br>相对路径写法：<br>            <code>@{…/thymeleaf/hello(userName=${user.username})}</code></p><p>添加参数：</p><p>​            <code>@{/thymeleaf/hello(userName=${user.username},userPassWord=${user.userpassword})}</code></p><p>URL后面的<code>(userName=${user.username},userPassWord=${user.userpassword})</code>表示将括号内的内容作为参数处理，多个参数用逗号隔开，该语法避免使用字符串拼接，大大提高了可读性                                                                                     如果要对URL进行修改，可以使用 th:href 和 th:src</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 访问的地址是 'http://localhost:8080/thymeleaf/hello?userName=xiaoming)'  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"hello.html"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">th:href</span>=<span class="string">"@&#123;http://localhost:8080/thymeleaf/hello(userName=$&#123;user.username&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"hello.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/thymeleaf/hello(userName=$&#123;user.username&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-表达式支持的语法"><a href="#3-表达式支持的语法" class="headerlink" title="3.表达式支持的语法"></a>3.表达式支持的语法</h2><h3 id="3-1算术运算"><a href="#3-1算术运算" class="headerlink" title="3.1算术运算"></a>3.1算术运算</h3><p>表达式支持算数运算，比如：+、-（减号）、*、/、%以及单独的 -（负号）<br>简单举两个例子:</p><table><thead><tr><th>语法</th><th>实例</th><th>运行结果</th></tr></thead><tbody><tr><td>+</td><td><code>&lt;p th:text=&quot;${Product.price+999}&quot; &gt;&lt;/p&gt;</code></td><td>1000(设Product.price为1)</td></tr><tr><td>-</td><td><code>&lt;p th:text=&quot;${Product.price-999}&quot; &gt;&lt;/p&gt;</code></td><td>1(设Product.price为1000)</td></tr></tbody></table><h3 id="3-2逻辑运算"><a href="#3-2逻辑运算" class="headerlink" title="3.2逻辑运算"></a>3.2逻辑运算</h3><p>逻辑运算符&gt;, &lt;, &lt;=,&gt;=，==,!=,!都可以使用，唯一需要注意的是使用&lt;,&gt;时需要用它的HTML转义符</p><h3 id="3-3条件运算"><a href="#3-3条件运算" class="headerlink" title="3.3条件运算"></a>3.3条件运算</h3><p>If-then: (if) ? (then)</p><p>If-then-else: (if) ? (then) : (else)</p><p>Default: (value) ?: (defaultvalue)</p><h3 id="3-4文本操作"><a href="#3-4文本操作" class="headerlink" title="3.4文本操作"></a>3.4文本操作</h3><p>设${name}的值是123</p><table><thead><tr><th>操作</th><th>结果</th></tr></thead><tbody><tr><td><code>&lt;p th:text=&quot;&#39;Hello！ &#39; + ${name} + &#39;!&#39;&quot; &gt;hello world&lt;/p&gt;</code></td><td>Hello ! 123 !</td></tr><tr><td>`&lt;p th:text=”</td><td>Hello！ ${name}!</td></tr></tbody></table><h2 id="4-使用方法"><a href="#4-使用方法" class="headerlink" title="4.使用方法"></a>4.使用方法</h2><h3 id="4-1-赋值、字符串拼接"><a href="#4-1-赋值、字符串拼接" class="headerlink" title="4.1 赋值、字符串拼接"></a>4.1 赋值、字符串拼接</h3><p>赋值用th:text=””属性，字符串拼接参考上面3.4，运用“+”拼接或者直接用“||”都可以做到，推荐使用后者。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'Hello！ ' + $&#123;name&#125; + '!'"</span> &gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|Hello！ $&#123;name&#125;!|"</span> &gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设${name}的值是123，上面的输出结果都是Hello ! 123 !</p><h3 id="4-2-条件判断If-Unless"><a href="#4-2-条件判断If-Unless" class="headerlink" title="4.2 条件判断If/Unless"></a>4.2 条件判断If/Unless</h3><p>Thymeleaf中使用th:if和th:unless属性进行条件判断，下面的例子中，<code>&lt;a&gt;</code>标签只有在<code>th:if</code>中条件成立时才显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;session.user != null&#125;"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>th:unless</code>于<code>th:if</code>恰好相反，只有表达式中的条件不成立，才会显示其内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:unless</span>=<span class="string">"$&#123;session.user == null&#125;"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用 <code>(if) ? (then) : (else)</code> 这种语法来判断显示的内容,如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"($&#123;hello&#125;!=null) ? '条件成立显示这个':'条件不成立显示这个'"</span> &gt;</span>Hello <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-循环遍历"><a href="#4-3-循环遍历" class="headerlink" title="4.3 循环遍历"></a>4.3 循环遍历</h3><ol><li>直接遍历<br>列表数据是一种非常常见的场景，例如现在有n条记录需要渲染成一个表格<code>&lt;table&gt;</code>，该数据集合必须是可以遍历的，使用<code>th:each</code>标签：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>产品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"p: $&#123;ps&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.id&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.name&#125;"</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.price&#125;"</span>&gt;</span>price<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：${ps}为一个可遍历的集合</p><ol start="2"><li>带状态遍历<br>还可以进行带状态的遍历，只需把遍历条件改成<code>th:each=&quot;p,status: ${ps}</code>，status称作状态变量，属性有：</li></ol><table><thead><tr><th>状态变量常用属性</th></tr></thead><tbody><tr><td>index:当前迭代对象的index（从0开始计算）</td></tr><tr><td>count: 当前迭代对象的index(从1开始计算)</td></tr><tr><td>size:被迭代对象的大小</td></tr><tr><td>current:当前迭代变量</td></tr><tr><td>even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）</td></tr><tr><td>first:布尔值，当前循环是否是第一个</td></tr><tr><td>last:布尔值，当前循环是否是最后一个</td></tr></tbody></table><p>比如我需要在遍历的时候输出序号，可以把上面的遍历代码改成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"p,status: $&#123;ps&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;status.count&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.id&#125;"</span><span class="attr">1</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.name&#125;"</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.price&#125;"</span>&gt;</span>price<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>遍历select</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"p:$&#123;ps&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;p.id&#125;"</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;p.id==p.id&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;p.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先在<code>select</code>中声明需要显示的数量<code>size</code>为多少<br><code>th:each=&quot;p:${ps}&quot;</code>是遍历的集合<br><code>th:value=&quot;${p.id}&quot;</code>令每一项的值是<code>${p.id}</code><br><code>th:selected=&quot;${p.id==p.id}&quot;</code> 表示被选中的项<br><code>th:text=&quot;${p.name}</code> 表示显示的文本信息是<code>${p.name}</code></p><p>​    4.遍历单选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"product"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">th:each</span>=<span class="string">"p:$&#123;ps&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;p.id&#125;"</span>  <span class="attr">th:checked</span>=<span class="string">"$&#123;p.id==p.id&#125;"</span>     <span class="attr">th:text</span>=<span class="string">"$&#123;p.name&#125;"</span>  /&gt;</span></span><br></pre></td></tr></table></figure><p>说明参考上面</p><h3 id="4-4-Swicth"><a href="#4-4-Swicth" class="headerlink" title="4.4 Swicth"></a>4.4 Swicth</h3><p>默认属性default可以用*表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:<span class="keyword">switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span><br><span class="line">  &lt;p th:<span class="keyword">case</span>=<span class="string">"'admin'"</span>&gt;User is an administrator&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p th:case="#&#123;roles.manager&#125;"&gt;User is a manager&lt;/</span>p&gt;</span><br><span class="line">  &lt;p th:<span class="keyword">case</span>=<span class="string">"*"</span>&gt;User is some other thing&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="4-5-URL相关"><a href="#4-5-URL相关" class="headerlink" title="4.5 URL相关"></a>4.5 URL相关</h3><p>设置背景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:style&#x3D;&quot;&#39;background:url(&#39; + @&#123;&#x2F;&lt;path-to-image&gt;&#125; + &#39;);&#39;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>根据属性值改变背景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div th:style&#x3D;&quot;&#39;background:url(&#39; + @&#123;($&#123;collect.webLogo&#125;&#x3D;&#x3D;&#39;&#39; ? &#39;img&#x2F;favicon.png&#39; : $&#123;collect.webLogo&#125;)&#125; + &#39;)&#39;&quot; &gt;&lt;&#x2F;div&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="5-页面布局"><a href="#5-页面布局" class="headerlink" title="5. 页面布局"></a>5. 页面布局</h2><p>实际情况使用布局通常比较复杂，这里只是简单介绍一下布局的使用方式，具体运用要根据实际需要编写不同的布局。<br>先编写一个用于布局的layout.html文件，内容大概如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;header th:fragment=<span class="string">"header"</span>&gt;</span><br><span class="line">    head  要显示的模板头部</span><br><span class="line">&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div th:include="::content"&gt;</span></span><br><span class="line"><span class="regexp">    这是正文 </span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;footer th:fragment=<span class="string">"footer"</span>&gt;</span><br><span class="line">   foot  要显示的模板尾部</span><br><span class="line">&lt;<span class="regexp">/footer&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><p>正文html文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span> xmlns:th=<span class="string">"http://www.thymeleaf.org"</span> th:replace=<span class="string">"layout"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;hello&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div th:fragment=<span class="string">"content"</span>&gt;</span><br><span class="line">   这才是正文</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br><span class="line"><span class="regexp">123456789101112</span></span><br></pre></td></tr></table></figure><p>运行的结果大概这样：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190403171429704.png" alt="在这里插入图片描述"><br>需要注意的正文html文件中的第二行th:replace=”layout”是前面编写的layout.html文件<br>正文中th:fragment=“content”的值要和布局文件中的th:include=”::content”相对应</p><h2 id="6-内置工具"><a href="#6-内置工具" class="headerlink" title="6.内置工具"></a>6.内置工具</h2><p>为了模板更加易用，Thymeleaf还提供了一系列Utility对象（内置于Context中），可以通过#直接访问：<br>Execution Info<br>Messages<br>URIs/URLs<br>Conversions<br>Dates<br>Calendars<br>Numbers<br>Strings<br>Objects<br>Booleans<br>Arrays<br>Lists<br>Sets<br>Maps<br>Aggregates<br>IDs</p><p>先说说Dates：<br>在后端实例化了一个Date对象<code>Date now = new Date();</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        直接输出日期 $&#123;now&#125;:</span><br><span class="line">        &lt;p th:text=<span class="string">"$&#123;now&#125;"</span>&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        默认格式化 $&#123;#dates.format(now)&#125;:</span></span><br><span class="line"><span class="regexp">        &lt;p th:text="$&#123;#dates.format(now)&#125;"&gt;&lt;/</span>p&gt;</span><br><span class="line">        自定义格式化 $&#123;#dates.format(now,'yyyy-MM-dd HH:mm:ss')&#125;:</span><br><span class="line">        &lt;p th:text=<span class="string">"$&#123;#dates.format(now,'yyyy-MM-dd HH:mm:ss')&#125;"</span>&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        直接获取当前时间：</span></span><br><span class="line"><span class="regexp">        &lt;p th:text="$&#123;#dates.createNow()&#125;"&gt;&lt;/</span>p&gt;</span><br><span class="line">        直接获取当天时间：</span><br><span class="line">        &lt;p th:text=<span class="string">"$&#123;#dates.createToday()&#125;"</span>&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">12345678910</span></span><br></pre></td></tr></table></figure><p>显示结果：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190403154728929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VrbmFpag==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Strings:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Check whether a String is empty (or null). Performs a trim() operation before check</span></span><br><span class="line"><span class="comment"> * Also works with arrays, lists or sets</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$&#123;#strings.isEmpty(name)&#125;</span><br><span class="line">$&#123;#strings.arrayIsEmpty(nameArr)&#125;</span><br><span class="line">$&#123;#strings.listIsEmpty(nameList)&#125;</span><br><span class="line">$&#123;#strings.setIsEmpty(nameSet)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Check whether a String starts or ends with a fragment</span></span><br><span class="line"><span class="comment"> * Also works with arrays, lists or sets</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$&#123;#strings.startsWith(name,'Don')&#125;                  // also array*, list* and set*</span><br><span class="line">$&#123;#strings.endsWith(name,endingFragment)&#125;           // also array*, list* and set*</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Compute length</span></span><br><span class="line"><span class="comment"> * Also works with arrays, lists or sets</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$&#123;#strings.length(str)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Null-safe comparison and concatenation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$&#123;#strings.equals(str)&#125;</span><br><span class="line">$&#123;#strings.equalsIgnoreCase(str)&#125;</span><br><span class="line">$&#123;#strings.concat(str)&#125;</span><br><span class="line">$&#123;#strings.concatReplaceNulls(str)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Random</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$&#123;#strings.randomAlphanumeric(count)&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334</span></span><br></pre></td></tr></table></figure><p>就不一一举例了，有需要的朋友按照具体内置对象百度了解一下吧。</p><h2 id="7-Thymeleaf常用标签"><a href="#7-Thymeleaf常用标签" class="headerlink" title="7.Thymeleaf常用标签"></a>7.Thymeleaf常用标签</h2><table><thead><tr><th>关键字</th><th>操作</th><th>例子</th></tr></thead><tbody><tr><td>th:id</td><td>替换id</td><td><code>&lt;input th:id=&quot;&#39;xxx&#39; + ${collect.id}&quot;/&gt;</code></td></tr><tr><td>th:text</td><td>文本替换</td><td><code>&lt;p th:text=&quot;${collect.description}&quot;&gt;description&lt;/p&gt;</code></td></tr><tr><td>th:utext</td><td>支持html的文本替换</td><td><code>&lt;p th:utext=&quot;${htmlcontent}&quot;&gt;conten&lt;/p&gt;</code></td></tr><tr><td>th:object</td><td>替换对象</td><td><code>&lt;div th:object=&quot;${session.user}&quot;&gt;</code></td></tr><tr><td>th:value</td><td>属性赋值</td><td><code>&lt;input th:value=&quot;${user.name}&quot; /&gt;</code></td></tr><tr><td>th:with</td><td>变量赋值运算</td><td><code>&lt;div th:with=&quot;isEven=${prodStat.count}%2==0&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td>th:style</td><td>设置样式</td><td><code>th:style=&quot;&#39;display:&#39; + @{(${sitrue} ? &#39;none&#39; : &#39;inline-block&#39;)} + &#39;&#39;&quot;</code></td></tr><tr><td>th:onclick</td><td>点击事件</td><td><code>th:&quot;&#39;getCollect()&#39;&quot;</code></td></tr><tr><td>th:each</td><td>属性赋值</td><td><code>tr th:each=&quot;user,userStat:${users}&quot;</code></td></tr><tr><td>th:if</td><td>判断条件</td><td><code>&lt;a th:if=&quot;${userId == collect.userId}&quot; &gt;</code></td></tr><tr><td>th:unless</td><td>和th:if判断相反</td><td><code>&lt;a th:href=&quot;@{/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt;</code></td></tr><tr><td>th:href</td><td>链接地址</td><td><code>&lt;a th:href=&quot;@{/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt;</code></td></tr><tr><td>th:switch</td><td>多路选择 配合th:case 使用</td><td><code>&lt;div th:switch=&quot;${user.role}&quot;&gt;</code></td></tr><tr><td>th:case</td><td>th:switch的一个分支</td><td><code>&lt;p th:case=&quot;&#39;admin&#39;&quot;&gt;User is an administrator&lt;/p&gt;</code></td></tr><tr><td>th:fragment</td><td>布局标签，定义一个代码片段，方便其它地方引用</td><td><code>&lt;div th:fragment=&quot;alert&quot;&gt;</code></td></tr><tr><td>th:include</td><td>布局标签，替换内容到引入的文件</td><td><code>&lt;head th:include=&quot;layout :: htmlhead&quot; th:with=&quot;title=&#39;xx&#39;&quot;&gt;&lt;/head&gt;</code></td></tr><tr><td>th:replace</td><td>布局标签，替换整个标签到引入的文件</td><td><code>&lt;div th:replace=&quot;fragments/header :: title&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td>th:selected</td><td>selected选择框 选中</td><td><code>th:selected=&quot;(${xxx.id} == ${configObj.dd})&quot;</code></td></tr><tr><td>th:src</td><td>图片类地址引入</td><td><code>&lt;img class=&quot;img-responsive&quot; alt=&quot;App Logo&quot; th:src=&quot;@{/img/logo.png}&quot; /&gt;</code></td></tr><tr><td>th:inline</td><td>定义js脚本可以使用变量</td><td><code>&lt;script type=&quot;text/javascript&quot; th:inline=&quot;javascript&quot;&gt;</code></td></tr><tr><td>th:action</td><td>表单提交的地址</td><td><code>&lt;form action=&quot;subscribe.html&quot; th:action=&quot;@{/subscribe}&quot;&gt;</code></td></tr><tr><td>th:remove</td><td>删除某个属性</td><td><code>&lt;tr th:remove=&quot;all&quot;&gt; 1.all:删除包含标签和所有的孩子。’2.body:不包含标记删除,但删除其所有的孩子。3.tag:包含标记的删除,但不删除它的孩子。4.all-but-first:删除所有包含标签的孩子,除了第一个。5.none:什么也不做。这个值是有用的动态评估。</code></td></tr><tr><td>th:attr</td><td>设置标签属性，多个属性可以用逗号分隔</td><td><code>比如 th:attr=&quot;src=@{/image/aa.jpg},title=#{logo}&quot;，此标签不太优雅，一般用的比较少。</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 模板引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk8新特性</title>
      <link href="/2020/09/03/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/09/03/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="jdk8-新特性-官方解释文档"><a href="#jdk8-新特性-官方解释文档" class="headerlink" title="jdk8 新特性 官方解释文档"></a><a href="https://www.oracle.com/cn/java/technologies/javase/8-whats-new.html" target="_blank" rel="noopener">jdk8 新特性 官方解释文档</a></h1><h1 id="jdk8-新特性-菜鸟"><a href="#jdk8-新特性-菜鸟" class="headerlink" title="jdk8 新特性 @菜鸟"></a><a href="https://www.runoob.com/java/java8-new-features.html" target="_blank" rel="noopener">jdk8 新特性 @菜鸟</a></h1><h1 id="用法"><a href="#用法" class="headerlink" title=": : 用法"></a>: : 用法</h1><h3 id="QueryWrapper-lambda-eq-方法"><a href="#QueryWrapper-lambda-eq-方法" class="headerlink" title="QueryWrapper.lambda.eq()方法"></a>QueryWrapper.lambda.eq()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ProposalBaseinfo&gt; <span class="title">getListByParentId</span><span class="params">(String parentId)</span> </span>&#123;</span><br><span class="line">   QueryWrapper&lt;YdWsUnitbaseinfoAppliances&gt; qw = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">   qw.lambda().eq(YdWsUnitbaseinfoAppliances::getParentId, parentId);</span><br><span class="line">List&lt;YdWsUnitbaseinfoAppliances&gt; ydWsUnitbaseinfoAppliances = ydWsUnitbaseinfoAppliancesMapper.selectList(qw);</span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释:"></a>解释:</h4><font color="#005588"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">qw.lambda().eq(YdWsUnitbaseinfoAppliances::getParentId, parentId);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于 把 parentId -&gt;传递给 YdWsUnitbaseinfoAppliances::getParentId,</span></span><br><span class="line"></span><br><span class="line">System.out.println(YdWsUnitbaseinfoAppliances.getParentId()) = parentId ;  </span><br><span class="line"><span class="comment">//简化为</span></span><br><span class="line"></span><br><span class="line">qw.lambda().eq（parentId）</span><br><span class="line"></span><br><span class="line">ydWsUnitbaseinfoAppliancesMapper.selectList(qw); </span><br><span class="line">（where parentId = #&#123;parentId&#125;）</span><br></pre></td></tr></table></figure></font>    <h1 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h1><h5 id="Arrays-stream-‘数组’-filter-‘变量名’-gt-‘过滤操作’-findFirst-orElse-null"><a href="#Arrays-stream-‘数组’-filter-‘变量名’-gt-‘过滤操作’-findFirst-orElse-null" class="headerlink" title="Arrays.stream(‘数组’).filter(‘变量名’ -&gt; ‘过滤操作’).findFirst().orElse(null);"></a>Arrays.stream(‘数组’).filter(‘变量名’ -&gt; ‘过滤操作’).findFirst().orElse(null);</h5><h5 id="findFirst-orElse-null-找到的第一个返回-否则返回null"><a href="#findFirst-orElse-null-找到的第一个返回-否则返回null" class="headerlink" title=".findFirst().orElse(null) 找到的第一个返回 否则返回null"></a>.findFirst().orElse(null) 找到的第一个返回 否则返回null</h5><font color="#005588"> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(RealAmountReportStatus.values()).filter(c -&gt; c.getValue().equal(value)).findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">  </span><br><span class="line">RealAmountReportStatus.values() 为数组（枚举本质上可以当成一个类‘kv’的数组）</span><br></pre></td></tr></table></figure></font>    <p>……注：假设返回值唯一<br>findFirst()  可以换成findAny() 提高效率</p><h4 id="JAVA8-用lamda表达式和增强版Comparator进行排序"><a href="#JAVA8-用lamda表达式和增强版Comparator进行排序" class="headerlink" title="JAVA8-用lamda表达式和增强版Comparator进行排序"></a>JAVA8-用lamda表达式和增强版Comparator进行排序</h4><ul><li>单条件升序：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.sort(Comparator.comparing(User::getId);</span><br></pre></td></tr></table></figure><ul><li>降序：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.sort(Comparator.comparing(User::getId).reversed());</span><br></pre></td></tr></table></figure><ul><li>多条件升序排序：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.sort(Comparator.comparing(User::getId).thenComparing(User::getName));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雪花算法</title>
      <link href="/2020/09/03/snowflake%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
      <url>/2020/09/03/snowflake%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="雪花算法-snowflake"><a href="#雪花算法-snowflake" class="headerlink" title="雪花算法(snowflake)"></a>雪花算法(snowflake)</h1><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。</p><p>这种方案大致来说是一种以划分命名空间（UUID也算，由于比较常见，所以单独分析）来生成ID的一种算法，这种方案把64-bit分别划分成多段，分开来标示<strong>机器、时间</strong>等。</p><p>其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号，最后还有一个符号位，永远是0。</p><p>比如在snowflake中的64-bit分别表示如下图（图片来自网络）所示：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20191009093154467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseTkxMDkwNQ==,size_16,color_FFFFFF,t_70" alt="img"></p><p>整个结构是64位，所以我们在Java中可以使用long来进行存储。 该算法实现基本就是二进制操作,单机每秒内理论上最多可以生成1024*(2^12)，也就是409.6万个ID(1024 X 4096 = 4194304)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 </span><br><span class="line"></span><br><span class="line">-  **1位标识**，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0</span><br><span class="line">-  **41位时间截(毫秒级)**，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截) 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T &#x3D; (1L &lt;&lt; 41) &#x2F; (1000L * 60 * 60 * 24 * 365) &#x3D; 69</span><br><span class="line">-  **10位的数据机器位**，可以部署在1024个节点，包括**5位datacenterId和5位workerId。**10-bit机器可以分别表示1024台机器。如果我们对IDC划分有需求，还可以将10-bit分5-bit给IDC，分5-bit给工作机器。这样就可以表示32个IDC，每个IDC下可以有32台机器，可以根据自身需求定义。</span><br><span class="line">-  **12位序列**，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号。12个自增序列号可以表示2^12个ID，理论上snowflake方案的QPS约为409.6w&#x2F;s，这种分配方式可以保证在任何一个IDC的任何一台机器在任意毫秒内生成的ID都是不同的。</span><br><span class="line"></span><br><span class="line"> 加起来刚好64位，为一个Long型。</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>​    整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</p><ul><li>毫秒数在高位，自增序列在低位，整个ID都是趋势递增的。</li><li>不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。</li><li>可以根据自身业务特性分配bit位，非常灵活。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><strong>强依赖机器时钟，如果机器上时钟回拨</strong>，会导致发号重复或者服务会处于不可用状态。</li><li>针对此，美团做出了改进：<a href="https://github.com/Meituan-Dianping/Leaf" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/Leaf</a></li></ul><h4 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowflakeIdWorker</span> </span>&#123;</span><br><span class="line"> <span class="comment">// ==============================Fields==================</span></span><br><span class="line">    <span class="comment">/** 开始时间截 (2019-08-06) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> twepoch = <span class="number">1565020800000L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 机器id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 数据标识id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 支持的最大数据标识id，结果是31 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 序列在id中占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 机器ID向左移12位 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 数据标识id向左移17位(12+5) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 时间截向左移22位(5+5+12) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 工作机器ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 数据中心ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 毫秒内序列(0~4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 上次生成ID的时间截 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//==============================Constructors====================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId 工作ID (0~31)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datacenterId 数据中心ID (0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowflakeIdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"worker Id can't be greater than %d or less than 0"</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ==============================Methods=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    String.format(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="comment">//</span></span><br><span class="line">                | (datacenterId &lt;&lt; datacenterIdShift) <span class="comment">//</span></span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) <span class="comment">//</span></span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//==============================Test=============================================</span></span><br><span class="line">    <span class="comment">/** 测试 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SnowflakeIdWorker idWorker = <span class="keyword">new</span> SnowflakeIdWorker(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line">            System.out.println(Long.toBinaryString(id));</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式 1"></a>实现方式 1</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">读取配置文件：https://blog.csdn.net/fly910905/article/details/78737323</span><br></pre></td></tr></table></figure><h5 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.datalook.util.common;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.time.DateFormatUtils;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>:  订单号生成</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:OrderIdUtils.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Copyright</span> 2016-2017  - Powered By 研发中心</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 王延飞</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>:2018年3月22日 下午7:43:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderIdUtils</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 最近的时间戳</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//机器id 2位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String machineId;</span><br><span class="line">    <span class="comment">// 0，并发控制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line">    <span class="comment">// 序列号的最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sequenceMax = <span class="number">9999</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderIdUtils</span><span class="params">(String machineId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.machineId = machineId;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成订单号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">nextId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Date now=<span class="keyword">new</span> Date();</span><br><span class="line">        String time= DateFormatUtils.format(now,<span class="string">"yyMMddHHmmssSSS"</span>);</span><br><span class="line">        <span class="keyword">long</span> timestamp = now.getTime();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.lastTimestamp == timestamp) &#123;</span><br><span class="line">            <span class="comment">// 如果上一个timestamp与新产生的相等，则sequence加一(0-4095循环);</span></span><br><span class="line">            <span class="comment">// 对新的timestamp，sequence从0开始</span></span><br><span class="line">            <span class="keyword">this</span>.sequence = <span class="keyword">this</span>.sequence + <span class="number">1</span> % <span class="keyword">this</span>.sequenceMax;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 重新生成timestamp</span></span><br><span class="line">                timestamp = <span class="keyword">this</span>.tilNextMillis(<span class="keyword">this</span>.lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.sequence = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.lastTimestamp= timestamp;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder(time).append(machineId).append(leftPad(sequence,<span class="number">4</span>));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 补码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">leftPad</span><span class="params">(<span class="keyword">long</span> i,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        String s = String.valueOf(i);</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> c=n-s.length();</span><br><span class="line">        c=c&lt;<span class="number">0</span>?<span class="number">0</span>:c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;c;t++)&#123;</span><br><span class="line">            sb.append(<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.append(s).toString();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待下一个毫秒的到来, 保证返回的毫秒数在参数lastTimestamp之后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 这里读取的是配置文件</span></span><br><span class="line">    <span class="comment">// 机器id(我这里是01,正式环境建议使用机器IP)</span></span><br><span class="line">    <span class="comment">// 注意：分布式环境,注意每台机器的id要保证不同;也可以使用机器ip,映射成一个数字编号（如01:192.168.55.12）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String myid= SysConstant.LOCAL_MACHINE_ID;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 示例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OrderIdUtils instance = <span class="keyword">new</span> OrderIdUtils(myid);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OrderIdUtils <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: 获取订单号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: 王延飞</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2018年3月22日 下午7:56:56</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  String <span class="title">getOrderNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        OrderIdUtils orderId = OrderIdUtils.getInstance();</span><br><span class="line">        String nextId = orderId.nextId();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> nextId;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OrderIdUtils orderId= OrderIdUtils.getInstance();</span><br><span class="line">        String nextId = orderId.nextId();</span><br><span class="line">        <span class="keyword">int</span> length = nextId.length();</span><br><span class="line">        System.out.println(nextId);</span><br><span class="line">        System.out.println(length);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现方式2"><a href="#实现方式2" class="headerlink" title="实现方式2"></a>实现方式2</h4><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-captcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="ID生成器"><a href="#ID生成器" class="headerlink" title="ID生成器"></a>ID生成器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdGenerator</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            workerId = NetUtil.ipv4ToLong(NetUtil.getLocalhostStr());</span><br><span class="line">            log.info(<span class="string">"当前机器 workerId: &#123;&#125;"</span>, workerId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">"获取机器 ID 失败"</span>, e);</span><br><span class="line">            workerId = NetUtil.getLocalhost().hashCode();</span><br><span class="line">            log.info(<span class="string">"当前机器 workerId: &#123;&#125;"</span>, workerId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个批次号，形如 2019071015301361000101237</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 数据库使用 char(25) 存储</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tenantId 租户ID，5 位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> module   业务模块ID，2 位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回批次号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">batchId</span><span class="params">(<span class="keyword">int</span> tenantId, <span class="keyword">int</span> <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">        String prefix = DateTime.now().toString(DatePattern.PURE_DATETIME_MS_PATTERN);</span><br><span class="line">        <span class="keyword">return</span> prefix + tenantId + <span class="keyword">module</span> + RandomUtil.randomNumbers(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getBatchId</span><span class="params">(<span class="keyword">int</span> tenantId, <span class="keyword">int</span> <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> batchId(tenantId, <span class="keyword">module</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成的是不带-的字符串，类似于：b17f24ff026d40949c85a24f4f375d42</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">simpleUUID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IdUtil.simpleUUID();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成的UUID是带-的字符串，类似于：a5c8a5e8-df2b-4706-bea4-08d0939410e3</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">randomUUID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IdUtil.randomUUID();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Snowflake snowflake = IdUtil.createSnowflake(workerId, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">snowflakeId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> snowflake.nextId();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">snowflakeId</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> dataCenterId)</span> </span>&#123;</span><br><span class="line">        Snowflake snowflake = IdUtil.createSnowflake(workerId, dataCenterId);</span><br><span class="line">        <span class="keyword">return</span> snowflake.nextId();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成类似：5b9e306a4df4f8c54a39fb0c</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * ObjectId 是 MongoDB 数据库的一种唯一 ID 生成策略，</span></span><br><span class="line"><span class="comment">     * 是 UUID version1 的变种，详细介绍可见：服务化框架－分布式 Unique ID 的生成方法一览。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">objectId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ObjectId.next();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://juejin.im/post/6844903950982840328参考地址" target="_blank" rel="noopener">https://juejin.im/post/6844903950982840328参考地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 雪花算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2020/09/02/Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/09/02/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java-基础知识"><a href="#Java-基础知识" class="headerlink" title="Java 基础知识"></a>Java 基础知识</h1><h3 id="Java初始化工作执行顺序"><a href="#Java初始化工作执行顺序" class="headerlink" title="Java初始化工作执行顺序"></a>Java初始化工作执行顺序</h3><p>Java程序初始化工作可以在许多不同的代码块中来完成，它们的执行顺序如下：<br><font color="red" size="4">父类的静态变量、父类的静态代码块、子类的静态变量、子类的静态代码块、<br>父类的非静态变量、父类的非静态代码块、父类的构造函数、<br>子类的非静态变量、子类的非静态代码块、子类的构造函数。</font>  </p><h3 id="java面向对象五个基本原则："><a href="#java面向对象五个基本原则：" class="headerlink" title="java面向对象五个基本原则："></a>java面向对象五个基本原则：</h3><ol><li>单一职责原则（Single-Resposibility Principle）：一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。</li><li>开放封闭原则（Open-Closed principle）：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。</li><li>Liskov替换原则（Liskov-Substituion Principle）：子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。</li><li>依赖倒置原则（Dependecy-Inversion Principle）：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。</li><li>接口隔离原则（Interface-Segregation Principle）：使用多个小的专门的接口，而不要使用一个大的总接口</li><li>总结成一个单词：立方体(solid),很好记!!!</li></ol><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><p>CMS全称 <strong>Concurrent Mark Sweep</strong>，是一款并发的、使用标记-清除算法的垃圾回收器，以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器，对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。</p><p>CMS的基础算法是：标记—清除。</p><p>它的过程可以分为以下6个步骤：</p><ol><li>初始标记(STW initial mark)</li><li>并发标记(Concurrent marking)</li><li>并发预清理(Concurrent precleaning)</li><li>重新标记(STW remark)</li><li>并发清理(Concurrent sweeping)</li><li>并发重置(Concurrent reset)</li></ol><p><img src= "/img/loading.gif" data-src="https://uploadfiles.nowcoder.com/images/20200502/9374535_1588428365082_2D3DED829E7D27716B630299E48DDD87" alt="img"></p><ol><li><strong>初始标记：</strong>在这个阶段，需要虚拟机停顿正在执行的任务，官方的叫法STW(Stop The Word)。这个过程从垃圾回收的”根对象”开始，只扫描到能够和”根对象”直接关联的对象，并作标记。所以<strong>这个过程虽然暂停了整个JVM，但是很快就完成了</strong>。</li><li><strong>并发标记：</strong>这个阶段紧随初始标记阶段，在初始标记的基础上继续向下追溯标记。并发标记阶段，<strong><em>应用程序的线程和并发标记的线程并发执行，所以***</em></strong>用户不会感受到停顿*<strong><em>**。\</em></strong></li><li><strong>并发预清理</strong>：并发预清理阶段仍然是并发的。在这个阶段，虚拟机查找在执行并发标记阶段新进入老年代的对象(可能会有一些对象从新生代晋升到老年代， 或者有一些对象被分配到老年代)。通过重新扫描，减少下一个阶段”重新标记”的工作，因为下一个阶段会Stop The World。</li><li><strong>重新标记</strong>：这个阶段会暂停虚拟机，收集器线程扫描在CMS堆中剩余的对象。扫描从”根对象”开始向下追溯，并处理对象关联。</li><li><strong>并发清理：</strong>清理垃圾对象，<strong><em>这个阶段收集器线程和应用程序线程并发执行\</em></strong>。</li><li><strong>并发重置：</strong>这个阶段，重置CMS收集器的数据结构，等待下一次垃圾回收。</li></ol><p>​    CMS不会整理、压缩堆空间，这样就带来一个问题：经过CMS收集的堆会产生空间碎片，CMS不对堆空间整理压缩节约了垃圾回收的停顿时间，但也带来的堆空间的浪费。</p><p>​    为了解决堆空间浪费问题，CMS回收器不再采用简单的指针指向一块可用堆空 间来为下次对象分配使用。；而是把一些未分配的空间汇总成一个列表，当JVM分配对象空间的时候，会搜索这个列表找到足够大的空间来hold住这个对象。</p><p>​    从上面的图可以看到，为了让应用程序不停顿，CMS线程和应用程序线程并发执行，这样就需要有更多的CPU，单纯靠线程切 换是不靠谱的。并且，重新标记阶段，为空保证STW快速完成，也要用到更多的甚至所有的CPU资源。</p><h4 id="只有初始标记和重新标记是没用用户线程参与的"><a href="#只有初始标记和重新标记是没用用户线程参与的" class="headerlink" title="只有初始标记和重新标记是没用用户线程参与的 !!!"></a><font color="red">只有初始标记和重新标记是没用用户线程参与的 !!!</font></h4>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端-返回结果封装</title>
      <link href="/2020/09/02/%E5%89%8D%E7%AB%AF-%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%B0%81%E8%A3%85/"/>
      <url>/2020/09/02/%E5%89%8D%E7%AB%AF-%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="返回结果封装类"><a href="#返回结果封装类" class="headerlink" title="返回结果封装类"></a>返回结果封装类</h1><p>ResultVo ——-普通返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONResultVo</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Result</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2513315400127803653L</span>;</span><br><span class="line">    <span class="keyword">protected</span> T info;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONResultVo <span class="title">setErrorMsg</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">        JSONResultVo vo = <span class="keyword">new</span> JSONResultVo();</span><br><span class="line">        vo.setMsg(msg);</span><br><span class="line">        vo.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONResultVo <span class="title">setErrorMsg</span><span class="params">(ResultEnum resultEnum)</span> </span>&#123;</span><br><span class="line">        JSONResultVo vo = <span class="keyword">new</span> JSONResultVo();</span><br><span class="line">        vo.setMsg(resultEnum.getName());</span><br><span class="line">        vo.setCode(resultEnum.getValue());</span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONResultVo <span class="title">setErrorMsg</span><span class="params">(<span class="keyword">int</span> code, String msg, Object obj)</span> </span>&#123;</span><br><span class="line">        JSONResultVo vo = <span class="keyword">new</span> JSONResultVo();</span><br><span class="line">        vo.setMsg(msg);</span><br><span class="line">        vo.setCode(code);</span><br><span class="line">        vo.setInfo(obj);</span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONResultVo <span class="title">setData</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        JSONResultVo vo = <span class="keyword">new</span> JSONResultVo();</span><br><span class="line">        vo.setInfo(obj);</span><br><span class="line">        vo.setMsg(<span class="string">"成功"</span>);</span><br><span class="line">        vo.setCode(ResultEnum.SUCCESS.getValue());</span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONResultVo <span class="title">ok</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JSONResultVo vo = <span class="keyword">new</span> JSONResultVo();</span><br><span class="line">        vo.setMsg(<span class="string">"成功"</span>);</span><br><span class="line">        vo.setCode(ResultEnum.SUCCESS.getValue());</span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONResultVo <span class="title">ok</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        JSONResultVo vo = <span class="keyword">new</span> JSONResultVo();</span><br><span class="line">        vo.setMsg(msg);</span><br><span class="line">        vo.setCode(ResultEnum.SUCCESS.getValue());</span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JSONResultVo</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(T info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setCode(ResultEnum.SUCCESS.getValue());</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"JSONResultVo(info="</span> + <span class="keyword">this</span>.getInfo() + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JSONResultVo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JSONResultVo</span><span class="params">(T info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PageResult-——分页返回结果"><a href="#PageResult-——分页返回结果" class="headerlink" title="PageResult ——分页返回结果"></a>PageResult ——分页返回结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">JSONResultVo</span>&lt;<span class="title">Page</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(com.github.pagehelper.Page&lt;T&gt; page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setCode(ResultEnum.SUCCESS.getValue());</span><br><span class="line">        <span class="keyword">this</span>.info = PageUtil.page2page(page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pom.xml</span><br><span class="line"><span class="comment">&lt;!--分页插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mockito.core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ResultEnum-——自定义返回枚举"><a href="#ResultEnum-——自定义返回枚举" class="headerlink" title="ResultEnum ——自定义返回枚举##"></a>ResultEnum ——自定义返回枚举##</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResultEnum  &#123;</span><br><span class="line">    SUCCESS(<span class="number">10000</span>, <span class="string">"成功"</span>),</span><br><span class="line">    HTTP_CODE_401(<span class="number">401</span>, <span class="string">"认证失败"</span>),</span><br><span class="line">    HTTP_CODE_404(<span class="number">404</span>, <span class="string">"接口地址不存在"</span>),</span><br><span class="line">    PARAMETER_ERROR(<span class="number">1001</span>, <span class="string">"参数验证错误"</span>),</span><br><span class="line">    SYSTEM_ERROR(<span class="number">1002</span>, <span class="string">"系统异常"</span>),</span><br><span class="line">    LOGIN_ERROR(<span class="number">1003</span>, <span class="string">"账户或者密码错误"</span>),</span><br><span class="line">    DELETE_ERROR(<span class="number">1004</span>, <span class="string">"删除失败"</span>),</span><br><span class="line">    TOKEN_ERROR(<span class="number">1005</span>, <span class="string">"token验证失败"</span>),</span><br><span class="line">    PHONE_ERROR(<span class="number">1006</span>, <span class="string">"手机号码错误"</span>),</span><br><span class="line">    UPDATE_ERROR(<span class="number">1007</span>, <span class="string">"修改失败"</span>),</span><br><span class="line">    INSERT_ERROR(<span class="number">1008</span>, <span class="string">"添加失败"</span>),</span><br><span class="line">    VCODE_ERROR(<span class="number">1009</span>, <span class="string">"验证码错误"</span>),</span><br><span class="line">    OUT_ERROR(<span class="number">1010</span>, <span class="string">"退出错误"</span>),</span><br><span class="line">    ACCOUNT_ABNORMALITY(<span class="number">1011</span>, <span class="string">"账户已锁定，请找管理员或技术支持解锁"</span>),</span><br><span class="line">    PHONE_VCODE_ERROR(<span class="number">1012</span>, <span class="string">"手机验证码错误"</span>),</span><br><span class="line">    USER_NOT_EXISTS_ERROR(<span class="number">1013</span>, <span class="string">"用户不存在"</span>),</span><br><span class="line">    PERMISSION_ERROR(<span class="number">1014</span>, <span class="string">"没有权限访问"</span>),</span><br><span class="line">    NOT_LOGIN_ERROR(<span class="number">1015</span>, <span class="string">"用户未登录，请先登录"</span>),</span><br><span class="line">    PARAM_NULL(<span class="number">1016</span>, <span class="string">"参数为空"</span>),</span><br><span class="line">    DATA_REPETITION(<span class="number">1017</span>, <span class="string">"数据已存在"</span>),</span><br><span class="line">    QUEYR_ERROR(<span class="number">1018</span>, <span class="string">"无数据"</span>),</span><br><span class="line">    CALL_INTERFACE_ERROR(<span class="number">1019</span>, <span class="string">"第三方接口调用异常"</span>),</span><br><span class="line">    STATUS_ERROR(<span class="number">1020</span>, <span class="string">"状态异常"</span>),</span><br><span class="line">    DATA_ERROR(<span class="number">1021</span>, <span class="string">"数据异常"</span>),</span><br><span class="line">    TYPE_PARAMETER_ERROR(<span class="number">1027</span>, <span class="string">"监测要素错误"</span>),</span><br><span class="line">    NO_ROLE(<span class="number">1022</span>, <span class="string">"用户未分配任何角色"</span>),</span><br><span class="line">    CAMERA_NO_OPEN(<span class="number">1023</span>, <span class="string">"摄像头未开启"</span>),</span><br><span class="line">    REPEAT_CLOCKIN(<span class="number">1024</span>, <span class="string">"今天已签到"</span>),</span><br><span class="line">    LOCUS_END(<span class="number">1025</span>, <span class="string">"轨迹已结束"</span>),</span><br><span class="line">    SQL_ERROR(<span class="number">1026</span>, <span class="string">"SQL执行异常"</span>),</span><br><span class="line">    PASSWORD_ERROR(<span class="number">1027</span>, <span class="string">"密码不一致"</span>),</span><br><span class="line">    CAMERA_NO_BUSY(<span class="number">1027</span>, <span class="string">"摄像头已经停止"</span>),</span><br><span class="line">    CALL_BUSY_ERROR(<span class="number">1026</span>, <span class="string">"摄像头正忙"</span>),</span><br><span class="line">    VERSION_ERROR(<span class="number">1028</span>, <span class="string">"版本文件格式不正确"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResultEnum</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2020/09/02/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/09/02/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><font size="4" color="#446666"><ul><li>数字：^[0-9]*$</li><li>n位的数字：^\d{n}$</li><li>至少n位的数字：^\d{n,}$</li><li>m-n位的数字：^\d{m,n}$</li><li>零和非零开头的数字：^(0|[1-9][0-9]*)$</li><li>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</li><li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})$</li><li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</li><li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li><li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li><li>非零的正整数：^[1-9]\d<em>$ 或 ^([1-9][0-9]</em>){1,3}$ 或 ^+?[1-9][0-9]*$</li><li>非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</li><li>非负整数：^\d+$ 或 ^[1-9]\d*|0$</li><li>非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</li><li>非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0$</li><li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>))|0?.0+|0$</li><li>正浮点数：^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]*.[0-9]+)|([0-9]</em>[1-9][0-9]*))$</li><li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]*.[0-9]+)|([0-9]</em>[1-9][0-9]*)))$</li><li>浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0)$</li></ul></font><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2><font size="4" color="#446666"><ul><li>汉字：^[\u4e00-\u9fa5]{0,}$</li><li>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</li><li>长度为3-20的所有字符：^.{3,20}$</li><li>由26个英文字母组成的字符串：^[A-Za-z]+$</li><li>由26个大写英文字母组成的字符串：^[A-Z]+$</li><li>由26个小写英文字母组成的字符串：^[a-z]+$</li><li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</li><li>由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$</li><li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li><li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</li><li>可以输入含有^%&amp;’,;=?$&quot;等字符：[^%&amp;’,;=?$\x22]+</li><li>禁止输入含有<del>的字符：[^</del>\x22]+</li></ul></font>##  ## 三、特殊需求表达式 ##<font size="4" color="#446666"><ul><li>Email地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$ </li><li>域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?</li><li>InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</li><li>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</li><li>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: ((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</li><li>日期格式：^\d{4}-\d{1,2}-\d{1,2}</li><li>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</li><li>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</li><li>钱的输入格式：<ul><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$</li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$</li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ul></li><li>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</li><li>中文字符的正则表达式：[\u4e00-\u9fa5]</li><li>双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li><li>空白行的正则表达式：\n\s*\r (可以用来删除空白行)</li><li>HTML标记的正则表达式：&lt;(\S<em>?)[^&gt;]</em>&gt;.<em>?|&lt;.</em>? /&gt; ( 首尾空白字符的正则表达式：^\s<em>|\s</em>$或(^\s<em>)|(\s</em>$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li><li>腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</li><li>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</li><li>IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</li></ul></font>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
